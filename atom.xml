<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eternal White Belt]]></title>
  <link href="http://wlowry88.github.io/atom.xml" rel="self"/>
  <link href="http://wlowry88.github.io/"/>
  <updated>2014-07-28T23:04:06-04:00</updated>
  <id>http://wlowry88.github.io/</id>
  <author>
    <name><![CDATA[Will Lowry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pros and Cons of Turbolinks in Rails 4 Applications]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/28/pros-and-cons-of-turbolinks-in-rails-4-applications/"/>
    <updated>2014-07-28T22:02:31-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/28/pros-and-cons-of-turbolinks-in-rails-4-applications</id>
    <content type="html"><![CDATA[<h3>Inspiration</h3>

<p>Recently, I was playing around with jQuery and AJAX since we&rsquo;d been learning about how to use event listeners and asynchronous Javascript requests. I made a blogging app that can add and edit posts and comments on those posts using AJAX. Additionally, I tried to add in a few event listeners using jQuery, such as using a slideToggle function on showing the full text of a post or the add comment form.</p>

<p>Everything was going great; refreshing the posts index page yielded all my nice front-end effects. Until I tried linking to it.</p>

<p>THEN EVERYTHING BROKE.</p>

<!--More-->


<h3>What are turbolinks?</h3>

<p>If you don&rsquo;t know what they do, it&rsquo;s not that complex. Basically, turbolinks will capture all links that look like they go to HTML pages (links using restful routes are prime candidates), makes an AJAX request for the content, and then replaces the body with the response&rsquo;s body. It has the potential to speed up your app a little bit. Steve Klabnik wrote a <a href="http://blog.steveklabnik.com/posts/2012-09-27-seriously--numbers--use-them-">post</a> about testing speed differences. The difference can be measurable &ndash; using Basecamp Next&rsquo;s CSS and JS files, turbolinks were able to decrease testing time by about 11 seconds. Not bad.</p>

<h3>The Problems</h3>

<p>The first problem is that Turbolinks do not call document’s ready event. Say you wanted to use Javascript&rsquo;s alert function on a page, or if you wanted to hide an element as soon as the page is loaded (perhaps to be shown later).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;You&#39;re seeing me if this page was directly loaded&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// a popup window</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#thing-we-wanted-hidden&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'><span class="c1">// won&#39;t work on a link.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above will only work when the page is refreshed directly. Unfortunately, when a page is accessed via a link in Rails 4, the turbolinks gem doesn&rsquo;t fetch it. Note, there is a workaround for this particular issue (jquery-turbolinks) but it&rsquo;s still a little annoying. And it doesn&rsquo;t address another issue.</p>

<p>Turbolinks can speed things up a little because it doesn&rsquo;t need to reload your assets. But it&rsquo;s more than just the assets that are saved. The entire global scope is saved. Yehuda Katz has said that &ldquo;a lot of existing JavaScript operates under the assumption of a clean scope, and a single DOMContentLoaded event,&rdquo; and I tend to agree after my experience thus far. While it&rsquo;s possible to add workarounds (for example, I would re-apply most of my page-load jQuery effects in my Ajax-returned javascript), we&rsquo;re doing pretty simple jQuery so far and I can only assume that complications will increase when using more advanced third-party Javascript.</p>

<h3>Ok, so how do you I rid of turbolinks in my app?</h3>

<p>To remove turbolinks from your Rails 4 Application, you should follow 3 simple steps:</p>

<ol>
<li><p>Delete the line <code>turbolinks</code> in your Gemfile to remove the turbolinks gem.</p></li>
<li><p>Delete the line <code>//= require turbolinks</code> in your app/assets/javascripts/application.js file to stop the asset pipeline from trying to require turbolinks.</p></li>
<li><p>Delete both lines <code>data-turbolinks-track =&gt; true</code> key/value pairs in your app/views/layouts/application.html.erb file to stop including a now-invalid hash option.</p></li>
</ol>


<h3>Conclusion</h3>

<p>If you&rsquo;re trying to include a good amount of Javascript, jQuery <a href="https://github.com/kossnocorp/jquery.turbolinks">Turbolinks</a> seem to be more trouble than they&rsquo;re worth.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Giving Pry a Try]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/13/giving-pry-a-try/"/>
    <updated>2014-07-13T19:25:44-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/13/giving-pry-a-try</id>
    <content type="html"><![CDATA[<h3><strong>Inspiration</strong></h3>

<p>We were in lecture here at the Flatiron School the other day, and Avi mentioned something called a REPL. He also mentioned that one of our favorite debugging tools, Pry, had a lot of cool functionality that we don&rsquo;t often exploit, so I decided to dig around a little bit and see what I could find.</p>

<!-- More -->


<h3><strong>REPLs</strong></h3>

<p>What is a <strong>REPL</strong>? The acronym itself stands for &ldquo;<strong>r</strong>ead-<strong>e</strong>val-<strong>p</strong>rint-<strong>l</strong>oop,&rdquo; and describes an environment where you type in code and get interactive feedback immediately. This type of tool is also known as an interactive top-level or language shell. It’s super easy to use for beginners, which is part of what has made Code School and Codeacademy so successful. No text editors, just instant feedback. For example, while making my Tic-Tac-Toe, I used <a href="http://repl.it/languages/Ruby">this online REPL extensively</a>. When you&rsquo;re at the earliest stage of learning to code this is a great tool. However, REPL&rsquo;s are also very useful for full-fledged developers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Some random REPL output:</span>
</span><span class='line'><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="c1">#=&gt; 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also have experience with REPL’s &ndash; such as our friend <strong>IRB</strong> (Interactive Ruby!). IRB is pretty cool for interpreting your Ruby on the spot, and it&rsquo;s definitely useful, but it also doesn’t really have too many features. And sometimes, it&rsquo;s a little visually confusing; anyone who has ever tried to define a method in IRB knows that it messes up the indentation a bit, for instance. There&rsquo;s definitely no syntax highlighting, and it&rsquo;s not really that useful from a debugging standpoint. In order to access the methods from your actual program, for instance, you&rsquo;re often stuck copying and pasting, which gets funky pretty quickly. You&rsquo;d BETTER have converted from tabs to spaces before that. And also, you get annoying (“Do you really want to display all 9423 items?” anyone??”)-type messages.</p>

<h3><strong>Enter &lsquo;Pry&rsquo;</strong></h3>

<p>Pry is d0pe. It works as a powerful alternative to the standard IRB shell for Ruby. It features <em>syntax highlighting</em>, a <em>flexible_plugin_architecture</em>, <em>runtime_invocation</em> and <em>source/documentation_browsing</em>! Us Flatiron School Ruby 005&rsquo;s have already used it for debugging purposes, but it can do a <strong>whole lot more</strong>.</p>

<p>Pry is super easy to install: <code>gem install pry</code> does the trick. Like IRB, Pry can be invoked right from the command line. <strong>To start it, just type “pry”.</strong> Then you will be in something that looks and feels like IRB, but is better in a lot of ways! For example, all the indentation works well, and you have syntax highlighting. <strong>You&rsquo;re able to customize all of this as well in your &ldquo;.pryrc&rdquo; file.</strong> This is analogous to the IRB &ldquo;.irbrc&rdquo; file. For example, here is a way to make it so that your pry output uses awesome print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ==============================</span>
</span><span class='line'><span class="c1">#   Awesome Print</span>
</span><span class='line'><span class="c1"># ==============================</span>
</span><span class='line'><span class="c1"># Pretty print your Ruby objects with style -- in full color and with proper indentation</span>
</span><span class='line'><span class="c1"># http://github.com/michaeldv/awesome_print</span>
</span><span class='line'><span class="k">if</span> <span class="n">defined?</span> <span class="no">AwesomePrint</span>
</span><span class='line'>  <span class="no">AwesomePrint</span><span class="o">.</span><span class="n">pry!</span>
</span><span class='line'>  <span class="c1">## The following line enables awesome_print for all pry output,</span>
</span><span class='line'>  <span class="c1"># and enables paging using Pry&#39;s pager with awesome_print.</span>
</span><span class='line'>  <span class="no">Pry</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">print</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span><span class="o">|</span><span class="n">output</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="no">Pry</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">BaseHelpers</span><span class="o">.</span><span class="n">stagger_output</span><span class="p">(</span><span class="s2">&quot;=&gt; </span><span class="si">#{</span><span class="n">value</span><span class="o">.</span><span class="n">ai</span><span class="p">(</span><span class="ss">indent</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">output</span><span class="p">)}</span>
</span><span class='line'>  <span class="c1">## If you want awesome_print without automatic pagination, use below:</span>
</span><span class='line'>  <span class="c1"># Pry.config.print = proc { |output, value| output.puts value.ai }</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## Evaluated result display inline</span>
</span><span class='line'>  <span class="c1"># Pry.config.print = lambda { |output, value| output.print &quot;\e[1A\e[18C # =&gt; &quot;; output.puts value.inspect }</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## if in bundler, break out, so awesome print doesn&#39;t have to be in Gemfile</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span> <span class="no">Bundler</span>
</span><span class='line'>    <span class="no">Gem</span><span class="o">.</span><span class="n">post_reset_hooks</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span> <span class="o">|</span><span class="n">hook</span><span class="o">|</span> <span class="n">hook</span><span class="o">.</span><span class="n">source_location</span><span class="o">.</span><span class="n">first</span> <span class="o">=~</span> <span class="sr">%r{/bundler/}</span> <span class="p">}</span>
</span><span class='line'>    <span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">reset</span>
</span><span class='line'>    <span class="nb">load</span> <span class="s1">&#39;rubygems/custom_require.rb&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## awesome_print config for Minitest.</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span> <span class="no">Minitest</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Minitest::Assertions</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">mu_pp</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>        <span class="n">obj</span><span class="o">.</span><span class="n">awesome_inspect</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>TONS OF AWESOME FEATURES</strong></h3>

<p>First, you can get to the entire Ruby documentation from <strong>inside pry</strong>. This is really awesome, because it means that we can be lazier and avoid the treachorous Google path and not have to leave our shell. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">show</span><span class="o">-</span><span class="n">doc</span> <span class="nb">Array</span><span class="c1">#each</span>
</span><span class='line'>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">c</span> <span class="p">(</span><span class="n">C</span> <span class="no">Method</span><span class="p">):</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="nb">Array</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="ss">Signature</span><span class="p">:</span> <span class="n">each</span><span class="p">()</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">11</span>
</span><span class='line'>
</span><span class='line'><span class="no">Calls</span> <span class="n">the</span> <span class="n">given</span> <span class="n">block</span> <span class="n">once</span> <span class="k">for</span> <span class="n">each</span> <span class="n">element</span> <span class="k">in</span> <span class="nb">self</span><span class="p">,</span> <span class="n">passing</span> <span class="n">that</span> <span class="n">element</span>
</span><span class='line'><span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">An</span> <span class="no">Enumerator</span> <span class="n">is</span> <span class="n">returned</span> <span class="k">if</span> <span class="n">no</span> <span class="n">block</span> <span class="n">is</span> <span class="n">given</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">a</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span> <span class="o">]</span>
</span><span class='line'>   <span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">print</span> <span class="n">x</span><span class="p">,</span> <span class="s2">&quot; -- &quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="ss">produces</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">a</span> <span class="o">--</span> <span class="n">b</span> <span class="o">--</span> <span class="n">c</span> <span class="o">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty cool, right? And for those people who are curious how a method based in C works, you can also get to the source code of the method really easily!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">show</span><span class="o">-</span><span class="nb">method</span> <span class="nb">Array</span><span class="c1">#each</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt;</span>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">c</span> <span class="p">(</span><span class="n">C</span> <span class="no">Method</span><span class="p">):</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="nb">Array</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'><span class="no">VALUE</span>
</span><span class='line'><span class="n">rb_ary_each</span><span class="p">(</span><span class="no">VALUE</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">long</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">volatile</span> <span class="no">VALUE</span> <span class="n">ary</span> <span class="o">=</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">RETURN_SIZED_ENUMERATOR</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ary_enum_length</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">RARRAY_LEN</span><span class="p">(</span><span class="n">ary</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">rb_yield</span><span class="p">(</span><span class="no">RARRAY_AREF</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ary</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow!! And you can also totally get line numbers with the <code>-l</code> option.</p>

<p>You can also get a Github gist of any method! Once you install the <code>gist</code> gem, you can totally generate a gist with one command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">gist</span> <span class="o">-</span><span class="n">m</span> <span class="no">Symbol</span><span class="c1">#to_proc</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="no">Gist</span> <span class="n">created</span> <span class="n">at</span> <span class="no">URL</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">gist</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="mi">381</span><span class="n">e426ba5a0307066b3</span><span class="p">,</span> <span class="n">which</span> <span class="n">is</span> <span class="n">now</span> <span class="k">in</span> <span class="n">the</span> <span class="n">clipboard</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sweet. Github just created a Gist of your code.</p>

<p>Pry supports a bash-like method of navigation. When you&rsquo;re in Pry, you can type <strong>&ldquo;whereami&rdquo;</strong> at any time, and it works a lot like the <strong>pwd</strong> command in bash. You can type <strong>ls</strong> to see the directories and files in your current level of Pry, and can even &ldquo;cd&rdquo; into them.</p>

<h3>Practical Use!</h3>

<p>So let&rsquo;s actually use it a little bit. Here, we&rsquo;ll use it to help improve our Sailor model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;pry&#39;</span> <span class="c1">#remember to require the &#39;pry&#39; gem.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Sailor</span>
</span><span class='line'>      <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">say_hello_to_everyone</span>
</span><span class='line'>          <span class="n">put</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> at your service, Captain!&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">go_sailing</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Weeeeeeeeeeee&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>         <span class="c1">#&lt;= We stick &#39;binding.pry&#39; into our code to stop it there.</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then your binding stops your code in its tracks! It keeps track of your line numbers and stops you exactly where you want it to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="sr">/Users/</span><span class="n">wlowry</span><span class="o">/</span><span class="no">Desktop</span><span class="o">/</span><span class="n">sailor</span><span class="o">.</span><span class="n">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">18</span> <span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">13</span><span class="p">:</span>
</span><span class='line'>    <span class="mi">14</span><span class="p">:</span>   <span class="k">def</span> <span class="nf">go_sailing</span>
</span><span class='line'>    <span class="mi">15</span><span class="p">:</span>     <span class="nb">puts</span> <span class="s2">&quot;Weeeeeeeeeeee&quot;</span>
</span><span class='line'>    <span class="mi">16</span><span class="p">:</span>   <span class="k">end</span>
</span><span class='line'>    <span class="mi">17</span><span class="p">:</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">:</span>   <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>         <span class="c1">#&lt;= We stick &#39;binding.pry&#39;</span>
</span><span class='line'>    <span class="mi">19</span><span class="p">:</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Sailor</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">M</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Sailor</span><span class="c1">#methods: go_sailing  name  say_hello_to_everyone</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Sailor</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">arel</span> <span class="o">=</span> <span class="no">Sailor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Arel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Sailor:0x0000010222d7d0 @name=&quot;Arel&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Sailor</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">arel</span><span class="o">.</span><span class="n">say_hello_to_everyone</span>
</span><span class='line'><span class="ss">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`put&#39; for #&lt;Sailor:0x0000010222d7d0 @name=&quot;Arel&quot;&gt;</span>
</span><span class='line'><span class="sb">from sailor.rb:11:in &#39;say_hello_to_everyone`</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Sailor</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">wtf</span>
</span><span class='line'><span class="c1">#Exception: NoMethodError: undefined method `put` for #&lt;Sailor:0x000001028a8768 @name=&quot;Arel&quot;&gt;</span>
</span><span class='line'><span class="o">--</span>
</span><span class='line'><span class="c1">#0: sailor.rb:11:in `say_hello_to_everyone`</span>
</span><span class='line'><span class="c1">#1: (pry):3:in `&lt;class:Sailor&gt;&#39;</span>
</span><span class='line'><span class="c1">#2: /Users/wlowry/.rvm/gems/ruby-2.1.2/gems/pry-0.10.0/lib/pry/pry_instance.rb:353:in `eval&#39;</span>
</span><span class='line'><span class="c1">#3: /Users/wlowry/.rvm/gems/ruby-2.1.2/gems/pry-0.10.0/lib/pry/pry_instance.rb:353:in `evaluate_ruby&#39;</span>
</span><span class='line'><span class="c1">#4: /Users/wlowry/.rvm/gems/ruby-2.1.2/gems/pry-0.10.0/lib/pry/pry_instance.rb:321:in `handle_line&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">edit</span> <span class="n">say_hello_to_everyone</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Breakdown of what just happened</h3>

<p>1) Wow, <code>binding.pry</code> stopped me in the middle of my code. Now I can run <code>ls</code> as if I were in a bash terminal, and I can also use the <code>-M</code> option to specify that I want to see all the methods of the class. Wow! It returns them right there for me to see (Note: if you do this in Rails, you&rsquo;ll realize how much the framework gives you, it&rsquo;s nuts).</p>

<p>2) Oh cool, I can instantiate new instances of my Sailor class right there on the spot; I don&rsquo;t need to copy and paste my class into my REPL and waste time. We don&rsquo;t have a console in this application, so this is very useful.</p>

<p>3) Lets try exercising the full power of our sailor, Arel. When we call <code>say_hello_to_everyone</code> on our swabber, we get an error. It looks like there&rsquo;s a breakdown in line 11: there is no method <code>put</code> for Arel. Well, that makes sense, because it was a typo!</p>

<p>4) If you type in <code>wtf</code> anywhere in pry, it returns the last error message that was logged (it keeps track of your history, accessible with the <code>history</code> command):D.</p>

<p>5) Wow, so I need to edit that &ldquo;say_hello_to_everyone&rdquo; method. But I can totally just do that by typing in <code>edit say_hello_to_everyone</code>. And then you know what it does? It sends me right over into Sublime, right to the CORRECT LINE where the method is defined. HOW COOL IS THAT?</p>

<h3>Conclusion</h3>

<p>So pry is pretty awesome &ndash; at the minimum it&rsquo;s better at doing most of the things you need than IRB. And I know what you&rsquo;re thinking &ndash; &ldquo;it would be so awesome to include this in my rails projects and run pry instead of the rails console.&rdquo; Guess what: You TOTALLY CAN!</p>

<p>Add this line to your Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you update your Gemfile and run <code>bundle install</code>, you&rsquo;re ready to enjoy Pry and all of the benefits it brings. You&rsquo;ll be well on your way to understanding how your code works and debugging uber efficiently, without headaches, and with color syntax highlighting :)</p>

<p>Until next time, enjoy Pry!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using APIs with Ruby]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/05/using-apis-with-ruby/"/>
    <updated>2014-07-05T19:21:23-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/05/using-apis-with-ruby</id>
    <content type="html"><![CDATA[<p>So everyone loves philosophical musings about beginning and learning, but I thought today’s post should be a little more technical. The topic &ndash; using API’s and getting data from other websites! This will be a two-part series &ndash; the first part will center around using API’s with Ruby and the second will be a surprise.</p>

<!--More-->


<h2>Part 1: Background on APIs with Ruby!</h2>

<h3>HTTP</h3>

<p>Everyone who’s used a computer with internet recently has already used HTTP. That’s how browsing the internet works. You internet browser sends an HTTP <strong>request</strong> to a server, and the server sends a <strong>response</strong> back to you.</p>

<p>When you navigate through a website, the links you’re clinking are all requests. And when you get to a different page with a different URL at the top, that’s a <strong>state transition</strong>; you have directed the next state of the application. HTTP is “<strong>stateless</strong>,” meaning that it has no memory across requests.</p>

<p>So what the hell is an API, anyway? Isn’t that just like, a buzzword?</p>

<p>Well, yes. Because APIs are really important and get a lot of attention these days. API stands for <strong>Application Programming Interface</strong>, and is really like a contract; it specifies the ways you can interact with an application. So if you wanted to interact with an app like Twitter, for example, you’d need to use their API, which would specify how you authenticate, use URLs, classes, and other methods, etc.</p>

<h3>Making a Request</h3>

<p>First, we <em>require</em> the ‘open-uri’ module, which allows us to bring in the additional methods and constants we need for our HTTP requests. ‘open-uri’ is a very cool module that allows us to do a lot with URLs; later we&rsquo;ll be using it to scrape the internet. But for now, suffice it to say that it&rsquo;s very useful.</p>

<p>Here is an example that I found on CodeAcademy that is quite useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">kittens</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;http://placekitten.com&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="n">kittens</span><span class="o">.</span><span class="n">read</span><span class="o">[</span><span class="mi">559</span><span class="p">,</span> <span class="mi">441</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">body</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; &quot;Meow Meow Meow&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More about HTTP</h3>

<p>Let&rsquo;s learn a little more about HTTP before we dive more into the thick of it. First, we&rsquo;ll learn about the four types of requests in HTTP. This is a tad misleading, because</p>

<p><strong>The Four Verbs For HTTP</strong></p>

<p>GET &ndash; retrieves info from the source</p>

<p>POST &ndash; sends new info to the source</p>

<p>PATCH &ndash; updates information at the source</p>

<p>DELETE &ndash; removes information from the source</p>

<p><strong>The Anatomy of a Request</strong></p>

<p>The <em>request line</em>: i.e. POST /willhasablog/yay HTTP/1.1</p>

<p>The <em>header</em> i.e. Content-Type: text/html; charset=UTF-8</p>

<p>The <em>body</em>: i.e. Name=You</p>

<p><strong>Authentication &amp; API Keys</strong></p>

<p>Most API’s require a key. The key accomplishes two things &ndash; not only does it grant you access, but it also identifies you TO the API &ndash; they like to know exactly how their service is used and prevent malicious activity.
Keys look like this:</p>

<p>api_key = “FtHwuH8w1RDjQpOr0y0gF3AWm8sRsRzncK3hHh9&#8221;</p>

<h3>Responses</h3>

<p>So we mentioned how every time you click on something on a site it’s actually a request to a remote server, right??
So when you make a successful request, like, when your question is heard, you will get a response. And the response will, among other things, contain a three-digit status code! Isn’t that awesome? Websites aren’t like people; they can&rsquo;t stonewall you. They respond! And the status code can start with a 1, 2, 3, 4, or 5.</p>

<p>100s &ndash; More uncommon, server is working on your request.</p>

<p>200s &ndash; These mean ok- usually getting a 200 is the equivalent of things are fine.</p>

<p>300s &ndash; These mean that the site can do what you want but you might have to be rerouted to accomplish it (like a change in URL requiring a redirect).</p>

<p>400s &ndash; These are common &ndash; means that you probably made a mistake.</p>

<p>500s &ndash; This means that the server goofed up and can’t successfully respond to the request.</p>

<p><strong>The Anatomy of a Response:</strong></p>

<p>Like a request, a response has three parts.</p>

<p>The <em>response line</em>:i.e. HTTP/1.1 200 OK</p>

<p>The <em>header</em>: i.e. Content-Type: text/xml; charset=UTF-8
The <em>body</em>: i.e. &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?></p>

<h1><string xmlns=“http://wlowry88.github.io">Accepted</string></h1>

<h3>XML and JSON</h3>

<p><strong>WTF is XML?</strong></p>

<p>XML is another markup language that is human and machine readable used to encode documents. Here&rsquo;s how you might parse it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">rexml</span><span class="o">/</span><span class="n">document</span><span class="err">’</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="err">“</span><span class="n">wlowrypost</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="no">REXML</span><span class="o">::</span><span class="no">Document</span><span class="o">.</span><span class="n">new</span> <span class="n">file</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span><span class="o">.</span><span class="n">elements</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="err">“</span><span class="n">pets</span><span class="o">/</span><span class="n">pet</span><span class="o">/</span><span class="nb">name</span><span class="err">”</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>     <span class="nb">puts</span> <span class="n">element</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>WTF is JSON?</strong></p>

<p>JSON stands for <strong>J</strong>ava<strong>Script </strong>O<strong>bject</strong>N**otation. It is based off of JavaScript objects, which look a lot like hashes to us Rubyists. It is more succinct than the equivalent XML, and it doesn’t require tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;Cartoon Foxes&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;Name&quot;</span><span class="p">:</span> <span class="s2">&quot;Fox Tall&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Job&quot;</span><span class="p">:</span> <span class="s2">&quot;Bein&#39; tall&quot;</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;Name&quot;</span><span class="p">:</span> <span class="s2">&quot;Fox Small&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;Job&quot;</span><span class="p">:</span> <span class="s2">&quot;Bein&#39; small&quot;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>So, XML or JSON?</strong>
The only way you’ll know what type of data you’ll get from an API is to read it’s documentation.</p>

<h3>Phew, that was a lot.</h3>

<p>Thanks so much, and next time we&rsquo;ll actually put what we learned today to use.</p>

<p>W</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Eternal Whitebelt?]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/04/White%20Belt/"/>
    <updated>2014-07-04T18:28:24-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/04/White Belt</id>
    <content type="html"><![CDATA[<h3>Inspiration</h3>

<p>It&rsquo;s a rainy Fourth of July here in Needham, MA, the town in which I was &ldquo;initialized&rdquo;. It&rsquo;s a huge change of pace from NYC. It&rsquo;s pretty cool to be back and see my family. But it also got me thinking. I have been coding now every day for 5 weeks (I accidentally broke my streak on github because I didn&rsquo;t know committing to opened pull requests didn&rsquo;t count, argh >_&lt;), and I have begun to realize that I really enjoy this stuff. And I like it enough to do it professionally. But that also means that I have a really long way to go.</p>

<!-- more -->


<h3>So, why the eternal white belt then? Don&rsquo;t you want to advance and improve?</h3>

<p>Without getting overly philosophical, I think it&rsquo;s really all about leaving your ego at the door and being ready to learn like a beginner. The white belt is a powerful tool &ndash; it allows you to know that you&rsquo;re not stupid, not completely incompetent, but acknowledge you may know nothing about a particular discipline. Yet. And that&rsquo;s completely ok. It helps keep things fresh; I think the best default state is to be learning.</p>

<blockquote><p>When [he] was quite old and close to death, the story goes, he called his students around him and told them we wanted to be buried in his white belt. What a touching story; how humble of the world’s highest-ranking judoist in his last days to ask for the emblem of a beginner! But Kano’s request, I eventually realized, was less humility than realism. At the moment of death, the ultimate transformation, we are all white belts. And if death makes beginners of us, so does life — again and again. In the master’s secret mirror, even at the moment of highest renown and accomplishment, there is an image of the newest student in the class, eager for knowledge, willing to play the fool.</p></blockquote>

<p>I think this is a very important thing to keep in mind coming from a non-technical background and leaping into the Flatiron School program. A few of my fellow students have a little more experience than I do with computer science concepts; for instance, I had never seen recursion in a solution before our &ldquo;Binary Trees in Ruby&rdquo; lab the other day. It was hard for me, but once I saw it, it was beautiful.</p>

<p>Regardless of whether or not I become a black-belt in Ruby, or whether or not I&rsquo;ll be able to understand procs and lambdas and metaprogramming or build a rails app from scratch without assistance, I think that maintaining a proper beginner mindset will be crucial.</p>

<p>Have a happy Fourth!</p>

<p>W</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An ActiveRecord Model of Jazz??]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/04/jazz-model/"/>
    <updated>2014-07-04T17:13:09-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/04/jazz-model</id>
    <content type="html"><![CDATA[<p>So we&rsquo;ve been learning about ActiveRecord here at Flatiron School, and how it&rsquo;s a really awesome ORM that makes things much easier for us in developing applications. I&rsquo;ve also known for a while that there is a connection between music theory and programming, especially with Python, and I wondered if there were a way to combine it with Ruby.</p>

<!-- more -->


<p>Jazz Model is an ActiveRecord model of concepts in Jazz theory, establishing relationships between chords and scales, and much more.</p>

<p>The core of Jazz Toolbox is a full Ruby object model representing concepts of Jazz theory
All chord/scale/mode/etc. definitions are stored as a mathematical system (sequences of numbers) which are then used to perform calculations.</p>

<p>For example, putting some chord in a different key is a matter of adding an arbitrary delta of half-steps and doing modulo 12.</p>

<h3>The Jazz Model Module</h3>

<p>Their classes often inherit from their base Jazz Module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">JazzModel</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">establish_connection</span> <span class="ss">:adapter</span> <span class="o">=&gt;</span> <span class="s2">&quot;sqlite3&quot;</span><span class="p">,</span> <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s2">&quot;:memory:&quot;</span>
</span><span class='line'>    <span class="nb">load</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;../../db/schema.rb&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load_definitions</span><span class="p">(</span><span class="n">definition_name</span> <span class="o">=</span> <span class="ss">:default</span><span class="p">)</span>
</span><span class='line'>      <span class="n">definition</span> <span class="o">=</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Definition</span><span class="o">[</span><span class="n">definition_name</span><span class="o">]</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;Definition </span><span class="si">#{</span><span class="n">definition_name</span><span class="si">}</span><span class="s2"> not found.&quot;</span> <span class="k">unless</span> <span class="n">definition</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">definition</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that the module inherits from ActiveRecord, and that it uses a sqlite3 adapter by default. However, we learned that ActiveRecord is relational database agnostic. Definitions are things like, chords, scales, etc. And here&rsquo;s an example of a class &ndash; the Chord class!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Chord</span> <span class="o">&lt;</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">KeyContext</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">acts_as_tree</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:chord_quality</span> <span class="c1">#zOMG we learned this yesterday</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:symbols</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordSymbol&#39;</span><span class="p">,</span> <span class="ss">:extend</span> <span class="o">=&gt;</span> <span class="no">ChordSymbolCollection</span>
</span><span class='line'>    <span class="n">has_one</span> <span class="ss">:primary_symbol</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordSymbol&#39;</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:chord_scales</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:modes</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:chord_scales</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:tones</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordTone&#39;</span><span class="p">,</span> <span class="ss">:extend</span> <span class="o">=&gt;</span> <span class="no">ToneSequence</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:voicings</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#a lot more stuff</span>
</span><span class='line'>  <span class="k">end</span> <span class="c1">#after that stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have associations happenin&#8217;, yo. In our study of ActiveRecord so far, we&rsquo;ve learned that objects can be related to one another; namely, a chord has many tones (makes sense), a chord has many voicings (these are inversions, a version of the chord that uses the same notes but in a different arrangement and note in the bass of the chord. But we can also see that it belongs_to chord quality &ndash; namely, there&rsquo;s a class called ChordQuality, and we can see a bit of it here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">ChordQuality</span> <span class="o">&lt;</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:chords</span> <span class="c1">#&lt;- #Chords, I like you too.</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">resolve</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">alias_method</span> <span class="ss">:[]</span><span class="p">,</span> <span class="ss">:resolve</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The relationship is reciprocated! And here&rsquo;s a quick look at what&rsquo;s going on in the database &ndash; this is a very truncated view and only represents the creation of the chords table!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:chord_qualities</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:chords</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">belongs_to</span> <span class="ss">:chord_quality</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:parent_id</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:synonyms</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:information</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also see a nice implementation of the tap method in our table creation. Below, we can see some of the usages of the method notes(), which returns an array of the notes of a chord. For music theory buffs, notice that it returns the correctly-spelled notes, not just the enharmonically easier ones!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Enumerate notes of a Chord:</span>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;maj&#39;</span><span class="o">].</span><span class="n">notes</span>   <span class="c1"># Defaults to C without specified key context#</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;C&#39;, &#39;E&#39;, &#39;G&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;Ebmaj7&#39;</span><span class="o">].</span><span class="n">notes</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;Eb&#39;, &#39;G&#39;, &#39;Bb&#39;, &#39;D&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Or specify key context with chained methods like this...</span>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;Bmaj7#11&#39;</span><span class="o">].</span><span class="n">notes</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;B&#39;, &#39;D#&#39;, &#39;F#&#39;, &#39;A#&#39;, &#39;E#&#39;]# Note E# - Correct theoretic value for this chord, not F</span>
</span></code></pre></td></tr></table></div></figure>


<p>Who knew there would be a &ldquo;notes&rdquo; method for chords in Ruby? I sure didn&rsquo;t. And you can solve problems like these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Ruby Example Problem:</span>
</span><span class='line'><span class="c1">#Find all chords associated with the Major scale and</span>
</span><span class='line'><span class="c1">#print each on a new line with the chord tones.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Scale</span><span class="o">[</span><span class="s1">&#39;Major&#39;</span><span class="o">].</span><span class="n">chords</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">notes</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)}</span> <span class="o">*</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># =&gt; Major 7: C, E, G, B    </span>
</span><span class='line'><span class="c1">#Major 6: C, E, G, A</span>
</span><span class='line'><span class="c1">#Dominant 6/9: C, E, G, Bb, D, A</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, I think this could be a fun open-source project to contribute to.</p>

<p>Cheers,</p>

<p>W</p>
]]></content>
  </entry>
  
</feed>
