<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Eternal Whitebelt]]></title>
  <link href="http://wlowry88.github.io/atom.xml" rel="self"/>
  <link href="http://wlowry88.github.io/"/>
  <updated>2014-09-23T12:28:13-04:00</updated>
  <id>http://wlowry88.github.io/</id>
  <author>
    <name><![CDATA[Will Lowry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Foolproof Guide to Hoisting in Javascript]]></title>
    <link href="http://wlowry88.github.io/blog/2014/09/23/foolproof-guide-to-hoisting-in-javascript/"/>
    <updated>2014-09-23T11:09:07-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/09/23/foolproof-guide-to-hoisting-in-javascript</id>
    <content type="html"><![CDATA[<p>Javascript is often made fun of for its idiosynchrasies (if you haven&rsquo;t seen Gary Bernhardt&rsquo;s &ldquo;Wat&rdquo; talk, stop right now and watch it: <a href="http://vimeo.com/94881698">http://vimeo.com/94881698</a>). Today I want to focus on one issue that can cause problems in Javascript &ndash; hoisting.</p>

<!--More-->


<p>Whenever you open up a new scope in Javascript &ndash; for instance, when you&rsquo;re defining a new function- the first thing that happens is a clearing out of memory space for all variables, which it initializes as undefined. This concept can be strange because no matter what order your javascript variables and functions present themselves in your code, your variables will be defined first. So given the following Javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">bigOuterFunction</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">imWrittenFirst</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;but hoisted second&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">firstVariable</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The load order will actually look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">bigOuterFunction</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">firstVariable</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">imWrittenFirst</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;but hoisted second&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">firstVariable</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, declared functions are hoisted (by the way, this is a declared function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">helloWorld</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">helloWorld</span><span class="p">(</span><span class="s2">&quot;Will&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//=&gt; &quot;Hello, Will!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a function expression (anonymous function):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">imAnonymous</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">print</span> <span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">imAnonymous</span><span class="p">(</span><span class="s2">&quot;Will&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//=&gt; &quot;Hello, Will!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is important to note the distinction between the two types of functions. Since the function expression was stored in a variable, the variable itself would be hoisted in step 1 and assigned as undefined. Then, it wouldn&rsquo;t be until <code>imAnonymous</code> is called that the anonymous functioned would be invoked.</p>

<p>The third thing that happens is all of your executable code runs. This includes variable assignment. However, it&rsquo;s easier to explain in terms of a simple list.</p>

<p>1) All declared variables are first manually initialized to an undefinedvalue and come first in the load order.
2) All loaded functions that end up being overwritten by other functions with the same name will just disappear from their current place in the load order.
3) Declared functions that end up replacing other functions, however, will NOT take the order place of the previous version, but instead will just fall into the load order behind existing loaded functions.
4) All declared variables receiving either new values or function expression assignments will lose the var keyword in the executable code portion of your answer (since they will already be declared through criteria 1).
5) Any function expression assignment is treated here as executable code, and does not change the load order of declared functions in your answer, even if they later replace that function.
6) All unreachable executable code that follows an unavoidable return statement (where the function ends) will disappear from your answer.</p>

<p>If you follow these steps you&rsquo;ll never get the dreaded UNDEFINED or ERRORs that keep your functions from running smoothly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python from Ruby]]></title>
    <link href="http://wlowry88.github.io/blog/2014/09/16/python-from-ruby/"/>
    <updated>2014-09-16T16:34:09-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/09/16/python-from-ruby</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve been learning a lot more about Python. I&rsquo;m a Rubyist by background but I&rsquo;m interested in learning Python because of all it&rsquo;s amazing libraries, especially those related to data science. This post is about a few differences that are useful to think about coming from a Ruby background. This is also largely a reaction to material I&rsquo;ve gathered from the web, including <a href="http://stackoverflow.com/questions/4769004/learning-python-from-ruby-differences-and-similarities">this</a> thread on Stack Overflow.</p>

<!--More-->


<h3>A Few Differences So Far</h3>

<p><strong>Philosophy</strong>. It seems that Python and Ruby were conceived with slightly different aims. While both are high-level, interpreted, general programming languages, Python is very focused on being explicit. I only just learned about this easter egg in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">this</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&quot;&quot;&quot;The Zen of Python, by Tim Peters</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Beautiful is better than ugly.</span>
</span><span class='line'><span class="sd">Explicit is better than implicit.</span>
</span><span class='line'><span class="sd">Simple is better than complex.</span>
</span><span class='line'><span class="sd">Complex is better than complicated.</span>
</span><span class='line'><span class="sd">Flat is better than nested.</span>
</span><span class='line'><span class="sd">Sparse is better than dense.</span>
</span><span class='line'><span class="sd">Readability counts.</span>
</span><span class='line'><span class="sd">Special cases aren&#39;t special enough to break the rules.</span>
</span><span class='line'><span class="sd">Although practicality beats purity.</span>
</span><span class='line'><span class="sd">Errors should never pass silently.</span>
</span><span class='line'><span class="sd">Unless explicitly silenced.</span>
</span><span class='line'><span class="sd">In the face of ambiguity, refuse the temptation to guess.</span>
</span><span class='line'><span class="sd">There should be one-- and preferably only one --obvious way to do it.</span>
</span><span class='line'><span class="sd">Although that way may not be obvious at first unless you&#39;re Dutch.</span>
</span><span class='line'><span class="sd">Now is better than never.</span>
</span><span class='line'><span class="sd">Although never is often better than *right* now.</span>
</span><span class='line'><span class="sd">If the implementation is hard to explain, it&#39;s a bad idea.</span>
</span><span class='line'><span class="sd">If the implementation is easy to explain, it may be a good idea.</span>
</span><span class='line'><span class="sd">Namespaces are one honking great idea -- let&#39;s do more of those!&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I was learning Ruby, I remember being blown away by the number of ways to solve any given problem. Yukihiro Matsumoto, the creator of Ruby once said, &ldquo;I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.&rdquo; I don&rsquo;t know about you, but it seems pretty clear that Ruby is intended to be programmer-centric. If there are two Rubyists who choose to solve a problem two different ways, let them! This stands in sharp contrast to several items from the Python &ldquo;creed&rdquo; &ndash; especially &ldquo;There should be one&mdash; and preferably only one &mdash;obvious way to do it.&rdquo; Python is not programmer-centric, it&rsquo;s program-centric.</p>

<p><strong>Ruby has blocks, Python does not.</strong></p>

<p><strong>Python has functions, Ruby does not.</strong> In Python you can pass a function or method and pass it to another function, whereas in Ruby, everything is a method and you need to wrap them in Procs to pass them.</p>

<p><strong>Scope/Closures</strong>. In Ruby, closures are defined using blocks &ndash; within a block you have full read and write access to variables defined outside the block. In Python, you can define functions inside of other functions but you don&rsquo;t have write access to variables from the outer function, only read access.</p>

<p><strong>Python uses list comprehensions, which are pretty awesome.</strong> If you want to do an operation with a list, it&rsquo;s often easier in Python. For example, maybe you wanted to return a new list of all the square numbers of elements greater than 10, you could do this in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_list</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=&gt; [121, 144, 169]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty expressive. In Ruby, the following would be a good solution but it&rsquo;s just less easy to read:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_list</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_list</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="p">}</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span> <span class="n">value</span> <span class="o">**</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [121, 144, 169]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously both work and return the same value &ndash; but Python does it in one pass instead of having to hold 3 arrays in memory.</p>

<p><strong>Python has tuples, Ruby uses arrays to simulate tuples.</strong> Maybe someday soon I&rsquo;ll appreciate this difference.</p>

<p><strong>Ruby has case statements, Python doesn&rsquo;t.</strong> I don&rsquo;t really care too much about this one.</p>

<p><strong>Ruby has ternary operators, Python doesn&rsquo;t.</strong> require_ternary_operators_to_stay_sane?? Ruby : Python</p>

<p><strong>Python has multiple inheritance, Ruby uses modules and mix-ins.</strong> This is actually pretty important, and I think I prefer the module approach.</p>

<p><strong>Python only has single-line lambda functions.</strong> Ruby has a quasi-equivalent with the block, and so Ruby code becomes more functional as a result &ndash; I tend to gravitate towards the <code>each</code> and <code>map</code> methods in Ruby but definitely go more for the <code>for x in y</code> approach in Python. However, there is a nice equivalent for the <code>map</code> method in Python. Given a Python function, you can also do things functionally instead of with the list comprehension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">map</span><span class="p">(</span><span class="n">my_method</span><span class="p">,</span> <span class="n">my_list</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=&gt; [5, 6, 7]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>NumPy, SciPy, Scikit-learn</strong>. Python has really cool libraries for data science, which is what I might be interested in down the line.</p>

<h3>Conclusion:</h3>

<p>There&rsquo;s no winner here. They&rsquo;re both incredible languages and I&rsquo;m still a whitebelt in both. However, there&rsquo;s definitely value to learing both &ndash; they both teach slightly different ways of attacking problems, both have great web solutions (I think Rails still has Django beat right now), and both are a distinct pleasure to work with.</p>

<p>Tata for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Public and Private Methods in Ruby]]></title>
    <link href="http://wlowry88.github.io/blog/2014/09/08/public/"/>
    <updated>2014-09-08T20:33:02-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/09/08/public</id>
    <content type="html"><![CDATA[<h3>Method Access Rules</h3>

<p>While the end user of your program is never going to be using the methods you define in a class directly, it is still helpful to control access to your methods. Envision a team situation in which multiple developers use instances of the same class; it is useful to control which methods can be used.</p>

<p>A simple way to think about the difference is to imagine our class is an airplane (I&rsquo;m writing this aboard one, in fact.)</p>

<!-- More -->


<h3>Public Methods</h3>

<p>In our <code>Plane</code> class, we have a few public instance methods. We don&rsquo;t need to specify that a method be public because that is their default.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Plane</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:type</span><span class="p">,</span> <span class="ss">:fuel</span><span class="p">,</span> <span class="ss">:landed</span><span class="p">,</span> <span class="ss">:people</span><span class="p">,</span> <span class="ss">:personal_info_of_passengers</span><span class="p">,</span> <span class="ss">:burning_fuel</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@model</span> <span class="o">=</span> <span class="n">model</span>
</span><span class='line'>      <span class="vi">@fuel</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'>      <span class="vi">@airborne</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="vi">@burning_fuel</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">take_off</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Firing up engines&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Fuel levels are </span><span class="si">#{</span><span class="n">fuel</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>      <span class="vi">@airborne</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">fire_up_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">fire_up_engine</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;firing up the engine&quot;</span>
</span><span class='line'>      <span class="n">begin_gas_combustion</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">begin_gas_combustion</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;combustin&#39; the gas!&quot;</span>
</span><span class='line'>      <span class="n">burning_fuel</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">personal_info_of_passengers</span><span class="p">(</span><span class="n">people</span><span class="p">)</span>
</span><span class='line'>      <span class="n">people</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>          <span class="n">person</span><span class="o">.</span><span class="n">social_security_number</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>    
</span></code></pre></td></tr></table></div></figure>


<p>Woah, wait a second. It&rsquo;s all well and good that we&rsquo;re able to see what type of plane we&rsquo;re working with, the fuel levels, and even whether or not we&rsquo;re airborne. However, there are a few things that we definitely don&rsquo;t want to be usable outside our class.</p>

<p>An object is easy to think about as something that does tasks for you, and its methods are the actions of doing those things. Public methods are like the API &ndash; where calls are made to the instances of the object. Private methods, on the other hand, are tasks that you might not want to be used freely. For example, the method <code>begin_gas_combustion</code> is a component of the method <code>fire_up_engine</code> but it&rsquo;s unclear whether or not you&rsquo;d want to use it in any other context. In fact, it would probably be unsafe to be able to use it in other contexts. Luckily, Ruby enables use of private methods to get around this problem.</p>

<h3>Private Methods</h3>

<p><strong>A private method cannot be called with an explicit receiver.</strong> This means that if we specify <code>begin_gas_combustion</code> to be a private method, we shouldn&rsquo;t be able to call <code>begin_gas_combustion</code> on instances of our <code>Plane</code> class explicitly. Let&rsquo;s rewrite a bit of our Plane class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Plane</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fire_up_engine</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;firing up the engine&quot;</span>
</span><span class='line'>      <span class="n">begin_gas_combustion</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">def</span> <span class="nf">begin_gas_combustion</span>
</span><span class='line'>          <span class="s2">&quot;combustin&#39; da gas!&quot;</span>
</span><span class='line'>          <span class="n">burning_fuel</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, that seems to make a bit more sense. Let&rsquo;s test out our methods.
If you try, you&rsquo;ll get the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wills_plane</span> <span class="o">=</span> <span class="no">Plane</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">747</span><span class="p">)</span>
</span><span class='line'><span class="n">wills_plane</span><span class="o">.</span><span class="n">begin_gas_combustion</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; &#39;&lt;main&gt;&#39;: private method &#39;begin_gas_combustion&#39; called for #&lt;Plane:0x00000002aeae50&gt; (NoMethodError)`</span>
</span></code></pre></td></tr></table></div></figure>


<p>
This makes sense based on our definition of private methods &ndash; the instance <code>will</code> is now the explicit receiver of the method as called. However, when we try the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wills_plane</span><span class="o">.</span><span class="n">fire_up_engine</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; &quot;firing up the engine&quot;</span>
</span><span class='line'><span class="c1">#=&gt; &quot;combustin&#39; da gas!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, since the method gets called within a public method, there is an implicit receiver &ndash; the specific instance of the object &ndash; and we are ok.</p>

<h3>Private Setter (=) Methods</h3>

<p>Private methods with the &ldquo;no explicit receiver&rdquo; rule do hit problems, however, with writer / setter methods. In these methods, you can&rsquo;t use the implicit receiver because Ruby would assume you were using a local variable instead of a method without the keyword <code>self</code>. Therefore, there is an exception &ndash; Ruby doesn&rsquo;t apply the rule to setter methods as long as the explicit receiver is <code>self</code>.</p>

<h3>You Can Bypass Private Methods with &lsquo;send&rsquo;</h3>

<p>Ruby has given us a way to get around our rule, however. You can always just use the <code>send</code> method to send any method to any object.</p>

<p>Hopefully this clears up the value / usage of private methods, and see you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linked Lists in Ruby]]></title>
    <link href="http://wlowry88.github.io/blog/2014/08/20/linked-lists-in-ruby/"/>
    <updated>2014-08-20T23:51:07-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/08/20/linked-lists-in-ruby</id>
    <content type="html"><![CDATA[<p>This post is centered around linked lists using Ruby.</p>

<p>A linked list is a <strong>data structure</strong> that consists of a collection of nodes that represent a sequence. Each element in a linked list will contain a datum and a reference to the next element in the linked list (a pointer).</p>

<p>In Ruby it makes most sense to use arrays due to built-in methods such as <code>shift</code>, <code>unshift</code>, <code>enq</code>, <code>deq</code>, <code>push</code> and <code>pop</code>, but it is helpful to know why linked lists can be beneficial.</p>

<!-- More -->


<p>Linked lists&#8217; biggest advantage over arrays in other languages is their ability to insert / remove list elements without reallocating or reorganization of the entire data structure. Arrays have indices, so deleting a value at index 0 for example requires every single item to be reindexed.</p>

<p>The flip-side of this, however, is that performing operations requiring access to particular elements of a linked list can be cumbersome. For example, finding the last element of a linked list requires scanning every element of the list.</p>

<p>Here are some additional advantages and disadvantages of linked lists:</p>

<p>LL Pros:</p>

<ul>
<li><p>Dynamic &ndash; LL&rsquo;s allocate the needed memory when the program is initiated and can can expand in real time without memory overload.</p></li>
<li><p>Insertion and deletion is easy.</p></li>
<li><p>It&rsquo;s easy to building linear data structures such as stacks and queues with linked lists.</p></li>
</ul>


<p>LL Cons:</p>

<ul>
<li><p>Since each element holds a value and a pointer, it&rsquo;s more memory intensive.</p></li>
<li><p>You have to access nodes sequentially since that&rsquo;s how they&rsquo;re defined; furthermore they&rsquo;re not stored continuously so it takes longer to access an element.</p></li>
<li><p>With a singly-linked list it&rsquo;s pretty much terrible to reverse traverse. Doubly-linked lists contain a pointer to the previous node as well but that&rsquo;s even more memory intensive.</p></li>
</ul>


<h3>Ruby Implementation</h3>

<p>It makes sense to define two ruby classes in implementing a linked list in Ruby &ndash; one for each element, called <code>Node</code>, and the other for the list itself, called <code>LinkedList</code>.</p>

<p>Here is the first. Note that a Node is initialized with its own data point as well as a pointer to the next Node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Node</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:next</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">next_node</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>      <span class="vi">@next</span> <span class="o">=</span> <span class="n">next_node</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, the LinkedList class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LinkedList</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@head</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="vi">@head</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="vi">@head</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">current</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>      <span class="vi">@head</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">!=</span> <span class="kp">nil</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">current</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">val</span> <span class="o">!=</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>        <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">return_list</span>
</span><span class='line'>    <span class="n">elements</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="vi">@head</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">elements</span> <span class="o">&lt;&lt;</span> <span class="n">current</span>
</span><span class='line'>      <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">elements</span> <span class="o">&lt;&lt;</span> <span class="n">current</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it &ndash; a basic implementation of a singly linked list in Ruby. Next time we&rsquo;ll use a linked list to build a stack and a queue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste Of Metaprogramming: Method_Missing]]></title>
    <link href="http://wlowry88.github.io/blog/2014/08/06/a-taste-of-metaprogramming-method-missing/"/>
    <updated>2014-08-06T21:35:02-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/08/06/a-taste-of-metaprogramming-method-missing</id>
    <content type="html"><![CDATA[<p>Anyone with a background in Ruby has seen a hash before. And anyone with a background in Javascript has seen a Javascript Object before. I encountered an interesting problem on CodeWars.com and wanted to share. The problem deals with accessing data in Ruby hashes the way you can in Javascript objects &ndash; by using the dot notation.</p>

<!--More-->


<p>Here&rsquo;s how I want to access the values:</p>

<p>hash = {a: 2, &ldquo;b&rdquo;: 1, c: 0.5}</p>

<p>hash.a # must return the same as hash[:a]
hash.b # must return the same as hash[&ldquo;b&rdquo;]
hash.size # size method must stay intact and return 3
hash.q # must return NoMethodError</p>

<h3>Approach</h3>

<p>First, since we&rsquo;re trying to modify the way we can access data from a hash, we must change the Hash class.</p>

<p>The third of the four constraints was particularly helpful in helping construct a solution because it meant that one couldn&rsquo;t overwrite any of the existing methods in the Hash class &ndash; calling methods such as size should result in their normal Hash functionality.</p>

<p>Therefore, it seemed appropriate to use the <code>method_missing</code> method. This was the first time I&rsquo;d encountered it.</p>

<h3>What is method_missing</h3>

<p>RubyLearning.com defines method_missing quite well:</p>

<blockquote><p>Whenever you send a message to an object in Ruby, the object executes the first method it finds on its method lookup path with the same name as the message. If it fails to find any such method, it raises a NoMethodError exception &ndash; unless you have provided the object with a method called method_missing. The method_missing method is passed the symbol of the non-existent method, an array of the arguments that were passed in the original call and any block passed to the original method.</p></blockquote>

<p>In order to harness the power of method_missing, we must reopen the Hash class and get to work. Here was my initial solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span> <span class="o">||</span> <span class="n">key</span> <span class="o">==</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">include?</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">NoMethodError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this works, it can be shortened significantly. Specifically, we won&rsquo;t need to use a large if/else statement with lots of conditions if we know a little about what ruby will attempt to do.</p>

<p>We know that when a method is called on our hash that is also the name of a key in the hash, we want to retrieve that key&rsquo;s value. Here is a refactored solution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">||</span> <span class="nb">self</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">||</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We know that the first of three expressions on line 4 of the refactored solution will work unless the key is a string. That&rsquo;s why we set up a chain of <code>||</code> &ldquo;or&rdquo; operators. If the key is a string, the first expression will return nil, and the truthiness of nil is false. Therefore, Ruby proceeds to the second funtion, and finds the correct key!</p>

<p>Lastly, we include the <code>super</code> expression at the end. We could have specified a <code>raise NoMethodError</code>, but using super is slightly more flexible and taps into the behavior of the Hash class. Cool!</p>

<h3>A Note on Duck-Punching / Monkey-Patching</h3>

<p>While this is a useful exercise and requires an understanding of method_missing to solve, it is somewhat frowned upon to alter the core of Ruby. Someone reading my code might know what&rsquo;s going on if it were on one page, but it&rsquo;s confusing for everyone else. Also, there might be upgrading problems; if something about the class changes between versions your particular monkey-patch might fail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google OAuth 2.0 Login in Rails 4]]></title>
    <link href="http://wlowry88.github.io/blog/2014/08/02/google-contacts-api-with-oauth-in-rails/"/>
    <updated>2014-08-02T23:06:27-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/08/02/google-contacts-api-with-oauth-in-rails</id>
    <content type="html"><![CDATA[<p>The process of logging in with Oauth may seem complex the first time you do it, but it becomes easier the second time around. This article assumes some familiarity with Ruby and the structure of a Rails application (but not too much :)</p>

<!--More-->


<h3>Step 1: Set Up a Google App</h3>

<p>First, go to this URL and</p>

<p>1) Set up a developer account and
2) Create a new project:</p>

<p><a href="https://code.google.com/apis/console">https://code.google.com/apis/console</a></p>

<p>You will see that you now have access to your project on the Projects page. Click into your project and then go to the credentials tab (in the left menu).</p>

<p>Note that the client ID and client secret are important &ndash; we&rsquo;ll be using those later. In the meantime, make sure that your redirect uri is the following:</p>

<p><a href="http://localhost:3000/auth/google_oauth2/callback">http://localhost:3000/auth/google_oauth2/callback</a></p>

<p>This is important because it&rsquo;s where Google will send info on the user who logged in.</p>

<h3>Step 2: Update your Gemfile</h3>

<p>Make sure your Gemfile includes the Google OmniAuth gem as well as the Figaro gem. Figaro is helpful in keeping your key and secret confidential (you can learn more about it <a href="http://rubydoc.info/gems/figaro/0.7.0/frames">here</a>).</p>

<p><code>gem "omniauth-google-oauth2"</code>
<code>gem "figaro"</code></p>

<p>Run a bundle install and update. This will create a few files, including the ominauth.rb file in your initializers directory.</p>

<h3>Step 3: Configuring Routes</h3>

<p>In your routes file, make sure that there is something that looks like the following:</p>

<p><code>get 'auth/:provider/callback', to: 'sessions#create'</code></p>

<p>After clicking your future &ldquo;Log In With Google&rdquo; button, Google will send back a hash with lots of information on the user. The information will be send using this route.</p>

<h3>Step 4: Generate Sessions Controller and Create Action</h3>

<p>Run the following command:
<code>rails g controller sessions create</code></p>

<p>Then, in your create action in the sessions controller, use the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">from_omniauth</span><span class="p">(</span><span class="vi">@auth</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@auth</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;omniauth.auth&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when the information is sent to the URL we already specified, it will be routed to the create action of our Sessions controller. It will then use the hash returned by OmniAuth to create a user.</p>

<h3>Step 5: Update User Model and Define from_omniauth</h3>

<p>As many of you astute readers will have realized, we will need to define a method called &ldquo;from_omniauth&rdquo; in our User model for the above code to work. Let&rsquo;s do that as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_omniauth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'><span class="n">where</span><span class="p">(</span><span class="n">auth</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="ss">:provider</span><span class="p">,</span> <span class="ss">:uid</span><span class="p">))</span><span class="o">.</span><span class="n">first_or_initialize</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">provider</span> <span class="o">=</span> <span class="n">auth</span><span class="o">.</span><span class="n">provider</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">uid</span> <span class="o">=</span> <span class="n">auth</span><span class="o">.</span><span class="n">uid</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">oauth_token</span> <span class="o">=</span> <span class="n">auth</span><span class="o">.</span><span class="n">credentials</span><span class="o">.</span><span class="n">token</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">oauth_expires_at</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">auth</span><span class="o">.</span><span class="n">credentials</span><span class="o">.</span><span class="n">expires_at</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may need to create a migration to add the <code>provider</code>, <code>uid</code>, <code>oauth_token</code>, and <code>oauth_expires_at</code> columns to your <code>users</code> table. The following line will do it for you if you haven&rsquo;t:</p>

<p><code>rails g migration AddDetailsToUser provider uid oauth_token oauth_expires_at</code></p>

<p>And then you simply migrate your database to reflect those changes:</p>

<p><code>rake db:migrate</code></p>

<h3>Step 6: Configure Ominauth.rb Initializer</h3>

<p>So far, we have set up a mechanism to recieve the information back from Google when a user logs in. Now, we&rsquo;ll make sure we also configure the sending of the request.</p>

<p>You have a file called &ldquo;omniauth.rb&rdquo; in your &lsquo;config/initializers/&rsquo; directory. Make the contents of the file look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:google_oauth2</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="no">GOOGLE_KEY</span><span class="o">]</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="no">GOOGLE_SECRET</span><span class="o">]</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">redirect_uri</span><span class="ss">:&quot;http://localhost:3000/auth/google_oauth2/callback&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes sure that the OAuth request is built with the right id and secret. You&rsquo;re probably wondering what the hell &ldquo;GOOGLE_SECRET&rdquo; are. They look like pretty random uninitialized constants. Let&rsquo;s fix that.</p>

<h3>Step 7: Your application.yml File</h3>

<p>When you included the Figaro gem, you were actually taking the first steps to protecting your app&rsquo;s secret information. You don&rsquo;t want to post that on Github &ndash; it makes it too easy for someone to come along and steal it. Instead, we&rsquo;re using Figaro, which allows you to put all your secrets in one file, application.yml, which is automatically &ldquo;gitignored.&rdquo; This way, it won&rsquo;t be public. Your application.yml file should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GOOGLE_KEY</span><span class="p">:</span> <span class="s2">&quot;2asflskf103f_not_a_real_key_don&#39;t_try_and_use_it&quot;</span>
</span><span class='line'><span class="no">GOOGLE_SECRET</span><span class="p">:</span> <span class="s2">&quot;2asl2tzz_ditto_on_this_one&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart your server if it&rsquo;s running &ndash; initializers are rerun upon server start!</p>

<h3>Step 8: Include Your Link or Google Button, and Enjoy!</h3>

<p>Now you can include a link in your project anywere you want people to be able to sign in with Google. Some natural spots might be a login page or on your navbar, but it&rsquo;s up to you!</p>

<p>The url of the link should be <code>/auth/google_oauth2</code>. This doesn&rsquo;t have the <code>/callback</code> appended to it because the callback is for- you guessed it- the callback.</p>

<h3>Step 9: Dominate the World Vicariously Through Google</h3>

<p>Tada! You&rsquo;re done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pros and Cons of Turbolinks in Rails 4 Applications]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/28/pros-and-cons-of-turbolinks-in-rails-4-applications/"/>
    <updated>2014-07-28T22:02:31-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/28/pros-and-cons-of-turbolinks-in-rails-4-applications</id>
    <content type="html"><![CDATA[<p>Recently, I was playing around with jQuery and AJAX since we&rsquo;d been learning about how to use event listeners and asynchronous Javascript requests. I made a blogging app that can add and edit posts and comments on those posts using AJAX. Additionally, I tried to add in a few event listeners using jQuery, such as using a slideToggle function on showing the full text of a post or the add comment form.</p>

<p>Everything was going great; refreshing the posts index page yielded all my nice front-end effects. Until I tried linking to it.</p>

<p>THEN EVERYTHING BROKE.</p>

<!--More-->


<h3>What are turbolinks?</h3>

<p>If you don&rsquo;t know what they do, it&rsquo;s not that complex. Basically, turbolinks will capture all links that look like they go to HTML pages (links using restful routes are prime candidates), makes an AJAX request for the content, and then replaces the body with the response&rsquo;s body. It has the potential to speed up your app a little bit. Steve Klabnik wrote a <a href="http://blog.steveklabnik.com/posts/2012-09-27-seriously--numbers--use-them-">post</a> about testing speed differences. The difference can be measurable &ndash; using Basecamp Next&rsquo;s CSS and JS files, turbolinks were able to decrease testing time by about 11 seconds. Not bad.</p>

<h3>The Problems</h3>

<p>The first problem is that Turbolinks do not call document’s ready event. Say you wanted to use Javascript&rsquo;s alert function on a page, or if you wanted to hide an element as soon as the page is loaded (perhaps to be shown later).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;You&#39;re seeing me if this page was directly loaded&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// a popup window</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#thing-we-wanted-hidden&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'><span class="c1">// won&#39;t work on a link.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above will only work when the page is refreshed directly. Unfortunately, when a page is accessed via a link in Rails 4, the turbolinks gem doesn&rsquo;t fetch it. Note, there is a workaround for this particular issue (jquery-turbolinks) but it&rsquo;s still a little annoying. And it doesn&rsquo;t address another issue.</p>

<p>Turbolinks can speed things up a little because it doesn&rsquo;t need to reload your assets. But it&rsquo;s more than just the assets that are saved. The entire global scope is saved. Yehuda Katz has said that &ldquo;a lot of existing JavaScript operates under the assumption of a clean scope, and a single DOMContentLoaded event,&rdquo; and I tend to agree after my experience thus far. While it&rsquo;s possible to add workarounds (for example, I would re-apply most of my page-load jQuery effects in my Ajax-returned javascript), we&rsquo;re doing pretty simple jQuery so far and I can only assume that complications will increase when using more advanced third-party Javascript.</p>

<h3>Ok, so how do you I rid of turbolinks in my app?</h3>

<p>To remove turbolinks from your Rails 4 Application, you should follow 3 simple steps:</p>

<ol>
<li><p>Delete the line <code>turbolinks</code> in your Gemfile to remove the turbolinks gem.</p></li>
<li><p>Delete the line <code>//= require turbolinks</code> in your app/assets/javascripts/application.js file to stop the asset pipeline from trying to require turbolinks.</p></li>
<li><p>Delete both lines <code>data-turbolinks-track =&gt; true</code> key/value pairs in your app/views/layouts/application.html.erb file to stop including a now-invalid hash option.</p></li>
</ol>


<h3>Conclusion</h3>

<p>If you&rsquo;re trying to include a good amount of Javascript, jQuery <a href="https://github.com/kossnocorp/jquery.turbolinks">Turbolinks</a> seem to be more trouble than they&rsquo;re worth.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Pry for More Efficient Debugging]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/13/giving-pry-a-try/"/>
    <updated>2014-07-13T19:25:44-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/13/giving-pry-a-try</id>
    <content type="html"><![CDATA[<p>We were in lecture here at the Flatiron School the other day, and Avi mentioned something called a REPL. He also mentioned that one of our favorite debugging tools, Pry, had a lot of cool functionality that we don&rsquo;t often exploit, so I decided to dig around a little bit and see what I could find.</p>

<!-- More -->


<h3><strong>REPLs</strong></h3>

<p>What is a <strong>REPL</strong>? The acronym itself stands for &ldquo;<strong>r</strong>ead-<strong>e</strong>val-<strong>p</strong>rint-<strong>l</strong>oop,&rdquo; and describes an environment where you type in code and get interactive feedback immediately. This type of tool is also known as an interactive top-level or language shell. It’s super easy to use for beginners, which is part of what has made Code School and Codeacademy so successful. No text editors, just instant feedback. For example, while making my Tic-Tac-Toe, I used <a href="http://repl.it/languages/Ruby">this online REPL extensively</a>. When you&rsquo;re at the earliest stage of learning to code this is a great tool. However, REPL&rsquo;s are also very useful for full-fledged developers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Some random REPL output:</span>
</span><span class='line'><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="c1">#=&gt; 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also have experience with REPL’s &ndash; such as our friend <strong>IRB</strong> (Interactive Ruby!). IRB is pretty cool for interpreting your Ruby on the spot, and it&rsquo;s definitely useful, but it also doesn’t really have too many features. And sometimes, it&rsquo;s a little visually confusing; anyone who has ever tried to define a method in IRB knows that it messes up the indentation a bit, for instance. There&rsquo;s definitely no syntax highlighting, and it&rsquo;s not really that useful from a debugging standpoint. In order to access the methods from your actual program, for instance, you&rsquo;re often stuck copying and pasting, which gets funky pretty quickly. You&rsquo;d BETTER have converted from tabs to spaces before that. And also, you get annoying (“Do you really want to display all 9423 items?” anyone??”)-type messages.</p>

<h3><strong>Enter &lsquo;Pry&rsquo;</strong></h3>

<p>Pry is d0pe. It works as a powerful alternative to the standard IRB shell for Ruby. It features <em>syntax highlighting</em>, a <em>flexible_plugin_architecture</em>, <em>runtime_invocation</em> and <em>source/documentation_browsing</em>! Us Flatiron School Ruby 005&rsquo;s have already used it for debugging purposes, but it can do a <strong>whole lot more</strong>.</p>

<p>Pry is super easy to install: <code>gem install pry</code> does the trick. Like IRB, Pry can be invoked right from the command line. <strong>To start it, just type “pry”.</strong> Then you will be in something that looks and feels like IRB, but is better in a lot of ways! For example, all the indentation works well, and you have syntax highlighting. <strong>You&rsquo;re able to customize all of this as well in your &ldquo;.pryrc&rdquo; file.</strong> This is analogous to the IRB &ldquo;.irbrc&rdquo; file. For example, here is a way to make it so that your pry output uses awesome print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ==============================</span>
</span><span class='line'><span class="c1">#   Awesome Print</span>
</span><span class='line'><span class="c1"># ==============================</span>
</span><span class='line'><span class="c1"># Pretty print your Ruby objects with style -- in full color and with proper indentation</span>
</span><span class='line'><span class="c1"># http://github.com/michaeldv/awesome_print</span>
</span><span class='line'><span class="k">if</span> <span class="n">defined?</span> <span class="no">AwesomePrint</span>
</span><span class='line'>  <span class="no">AwesomePrint</span><span class="o">.</span><span class="n">pry!</span>
</span><span class='line'>  <span class="c1">## The following line enables awesome_print for all pry output,</span>
</span><span class='line'>  <span class="c1"># and enables paging using Pry&#39;s pager with awesome_print.</span>
</span><span class='line'>  <span class="no">Pry</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">print</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span><span class="o">|</span><span class="n">output</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="no">Pry</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">BaseHelpers</span><span class="o">.</span><span class="n">stagger_output</span><span class="p">(</span><span class="s2">&quot;=&gt; </span><span class="si">#{</span><span class="n">value</span><span class="o">.</span><span class="n">ai</span><span class="p">(</span><span class="ss">indent</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">output</span><span class="p">)}</span>
</span><span class='line'>  <span class="c1">## If you want awesome_print without automatic pagination, use below:</span>
</span><span class='line'>  <span class="c1"># Pry.config.print = proc { |output, value| output.puts value.ai }</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## Evaluated result display inline</span>
</span><span class='line'>  <span class="c1"># Pry.config.print = lambda { |output, value| output.print &quot;\e[1A\e[18C # =&gt; &quot;; output.puts value.inspect }</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## if in bundler, break out, so awesome print doesn&#39;t have to be in Gemfile</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span> <span class="no">Bundler</span>
</span><span class='line'>    <span class="no">Gem</span><span class="o">.</span><span class="n">post_reset_hooks</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span> <span class="o">|</span><span class="n">hook</span><span class="o">|</span> <span class="n">hook</span><span class="o">.</span><span class="n">source_location</span><span class="o">.</span><span class="n">first</span> <span class="o">=~</span> <span class="sr">%r{/bundler/}</span> <span class="p">}</span>
</span><span class='line'>    <span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">reset</span>
</span><span class='line'>    <span class="nb">load</span> <span class="s1">&#39;rubygems/custom_require.rb&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">## awesome_print config for Minitest.</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span> <span class="no">Minitest</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Minitest::Assertions</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">mu_pp</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>        <span class="n">obj</span><span class="o">.</span><span class="n">awesome_inspect</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>TONS OF AWESOME FEATURES</strong></h3>

<p>First, you can get to the entire Ruby documentation from <strong>inside pry</strong>. This is really awesome, because it means that we can be lazier and avoid the treachorous Google path and not have to leave our shell. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">show</span><span class="o">-</span><span class="n">doc</span> <span class="nb">Array</span><span class="c1">#each</span>
</span><span class='line'>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">c</span> <span class="p">(</span><span class="n">C</span> <span class="no">Method</span><span class="p">):</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="nb">Array</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="ss">Signature</span><span class="p">:</span> <span class="n">each</span><span class="p">()</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">11</span>
</span><span class='line'>
</span><span class='line'><span class="no">Calls</span> <span class="n">the</span> <span class="n">given</span> <span class="n">block</span> <span class="n">once</span> <span class="k">for</span> <span class="n">each</span> <span class="n">element</span> <span class="k">in</span> <span class="nb">self</span><span class="p">,</span> <span class="n">passing</span> <span class="n">that</span> <span class="n">element</span>
</span><span class='line'><span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">An</span> <span class="no">Enumerator</span> <span class="n">is</span> <span class="n">returned</span> <span class="k">if</span> <span class="n">no</span> <span class="n">block</span> <span class="n">is</span> <span class="n">given</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">a</span> <span class="o">=</span> <span class="o">[</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span> <span class="o">]</span>
</span><span class='line'>   <span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">print</span> <span class="n">x</span><span class="p">,</span> <span class="s2">&quot; -- &quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="ss">produces</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">a</span> <span class="o">--</span> <span class="n">b</span> <span class="o">--</span> <span class="n">c</span> <span class="o">--</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty cool, right? And for those people who are curious how a method based in C works, you can also get to the source code of the method really easily!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">show</span><span class="o">-</span><span class="nb">method</span> <span class="nb">Array</span><span class="c1">#each</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt;</span>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">c</span> <span class="p">(</span><span class="n">C</span> <span class="no">Method</span><span class="p">):</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="nb">Array</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'><span class="no">VALUE</span>
</span><span class='line'><span class="n">rb_ary_each</span><span class="p">(</span><span class="no">VALUE</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">long</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">volatile</span> <span class="no">VALUE</span> <span class="n">ary</span> <span class="o">=</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">RETURN_SIZED_ENUMERATOR</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ary_enum_length</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">RARRAY_LEN</span><span class="p">(</span><span class="n">ary</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">rb_yield</span><span class="p">(</span><span class="no">RARRAY_AREF</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ary</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow!! And you can also totally get line numbers with the <code>-l</code> option.</p>

<p>You can also get a Github gist of any method! Once you install the <code>gist</code> gem, you can totally generate a gist with one command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">gist</span> <span class="o">-</span><span class="n">m</span> <span class="no">Symbol</span><span class="c1">#to_proc</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="no">Gist</span> <span class="n">created</span> <span class="n">at</span> <span class="no">URL</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">gist</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="mi">381</span><span class="n">e426ba5a0307066b3</span><span class="p">,</span> <span class="n">which</span> <span class="n">is</span> <span class="n">now</span> <span class="k">in</span> <span class="n">the</span> <span class="n">clipboard</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sweet. Github just created a Gist of your code.</p>

<p>Pry supports a bash-like method of navigation. When you&rsquo;re in Pry, you can type <strong>&ldquo;whereami&rdquo;</strong> at any time, and it works a lot like the <strong>pwd</strong> command in bash. You can type <strong>ls</strong> to see the directories and files in your current level of Pry, and can even &ldquo;cd&rdquo; into them.</p>

<h3>Practical Use!</h3>

<p>So let&rsquo;s actually use it a little bit. Here, we&rsquo;ll use it to help improve our Sailor model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;pry&#39;</span> <span class="c1">#remember to require the &#39;pry&#39; gem.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Sailor</span>
</span><span class='line'>      <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">say_hello_to_everyone</span>
</span><span class='line'>          <span class="n">put</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> at your service, Captain!&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">go_sailing</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Weeeeeeeeeeee&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>         <span class="c1">#&lt;= We stick &#39;binding.pry&#39; into our code to stop it there.</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then your binding stops your code in its tracks! It keeps track of your line numbers and stops you exactly where you want it to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="sr">/Users/</span><span class="n">wlowry</span><span class="o">/</span><span class="no">Desktop</span><span class="o">/</span><span class="n">sailor</span><span class="o">.</span><span class="n">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">18</span> <span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">13</span><span class="p">:</span>
</span><span class='line'>    <span class="mi">14</span><span class="p">:</span>   <span class="k">def</span> <span class="nf">go_sailing</span>
</span><span class='line'>    <span class="mi">15</span><span class="p">:</span>     <span class="nb">puts</span> <span class="s2">&quot;Weeeeeeeeeeee&quot;</span>
</span><span class='line'>    <span class="mi">16</span><span class="p">:</span>   <span class="k">end</span>
</span><span class='line'>    <span class="mi">17</span><span class="p">:</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">:</span>   <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>         <span class="c1">#&lt;= We stick &#39;binding.pry&#39;</span>
</span><span class='line'>    <span class="mi">19</span><span class="p">:</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Sailor</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">-</span><span class="n">M</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Sailor</span><span class="c1">#methods: go_sailing  name  say_hello_to_everyone</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Sailor</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">arel</span> <span class="o">=</span> <span class="no">Sailor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Arel&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Sailor:0x0000010222d7d0 @name=&quot;Arel&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Sailor</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">arel</span><span class="o">.</span><span class="n">say_hello_to_everyone</span>
</span><span class='line'><span class="ss">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`put&#39; for #&lt;Sailor:0x0000010222d7d0 @name=&quot;Arel&quot;&gt;</span>
</span><span class='line'><span class="sb">from sailor.rb:11:in &#39;say_hello_to_everyone`</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Sailor</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">wtf</span>
</span><span class='line'><span class="c1">#Exception: NoMethodError: undefined method `put` for #&lt;Sailor:0x000001028a8768 @name=&quot;Arel&quot;&gt;</span>
</span><span class='line'><span class="o">--</span>
</span><span class='line'><span class="c1">#0: sailor.rb:11:in `say_hello_to_everyone`</span>
</span><span class='line'><span class="c1">#1: (pry):3:in `&lt;class:Sailor&gt;&#39;</span>
</span><span class='line'><span class="c1">#2: /Users/wlowry/.rvm/gems/ruby-2.1.2/gems/pry-0.10.0/lib/pry/pry_instance.rb:353:in `eval&#39;</span>
</span><span class='line'><span class="c1">#3: /Users/wlowry/.rvm/gems/ruby-2.1.2/gems/pry-0.10.0/lib/pry/pry_instance.rb:353:in `evaluate_ruby&#39;</span>
</span><span class='line'><span class="c1">#4: /Users/wlowry/.rvm/gems/ruby-2.1.2/gems/pry-0.10.0/lib/pry/pry_instance.rb:321:in `handle_line&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">edit</span> <span class="n">say_hello_to_everyone</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Breakdown of what just happened</h3>

<p>1) Wow, <code>binding.pry</code> stopped me in the middle of my code. Now I can run <code>ls</code> as if I were in a bash terminal, and I can also use the <code>-M</code> option to specify that I want to see all the methods of the class. Wow! It returns them right there for me to see (Note: if you do this in Rails, you&rsquo;ll realize how much the framework gives you, it&rsquo;s nuts).</p>

<p>2) Oh cool, I can instantiate new instances of my Sailor class right there on the spot; I don&rsquo;t need to copy and paste my class into my REPL and waste time. We don&rsquo;t have a console in this application, so this is very useful.</p>

<p>3) Lets try exercising the full power of our sailor, Arel. When we call <code>say_hello_to_everyone</code> on our swabber, we get an error. It looks like there&rsquo;s a breakdown in line 11: there is no method <code>put</code> for Arel. Well, that makes sense, because it was a typo!</p>

<p>4) If you type in <code>wtf</code> anywhere in pry, it returns the last error message that was logged (it keeps track of your history, accessible with the <code>history</code> command):D.</p>

<p>5) Wow, so I need to edit that &ldquo;say_hello_to_everyone&rdquo; method. But I can totally just do that by typing in <code>edit say_hello_to_everyone</code>. And then you know what it does? It sends me right over into Sublime, right to the CORRECT LINE where the method is defined. HOW COOL IS THAT?</p>

<h3>Conclusion</h3>

<p>So pry is pretty awesome &ndash; at the minimum it&rsquo;s better at doing most of the things you need than IRB. And I know what you&rsquo;re thinking &ndash; &ldquo;it would be so awesome to include this in my rails projects and run pry instead of the rails console.&rdquo; Guess what: You TOTALLY CAN!</p>

<p>Add this line to your Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you update your Gemfile and run <code>bundle install</code>, you&rsquo;re ready to enjoy Pry and all of the benefits it brings. You&rsquo;ll be well on your way to understanding how your code works and debugging uber efficiently, without headaches, and with color syntax highlighting :)</p>

<p>Until next time, enjoy Pry!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using APIs with Ruby]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/05/using-apis-with-ruby/"/>
    <updated>2014-07-05T19:21:23-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/05/using-apis-with-ruby</id>
    <content type="html"><![CDATA[<p>So everyone loves philosophical musings about beginning and learning, but I thought today’s post should be a little more technical. The topic &ndash; using API’s and getting data from other websites! This will be a two-part series &ndash; the first part will center around using API’s with Ruby and the second will be a surprise.</p>

<!--More-->


<h2>Part 1: Background on APIs with Ruby!</h2>

<h3>HTTP</h3>

<p>Everyone who’s used a computer with internet recently has already used HTTP. That’s how browsing the internet works. You internet browser sends an HTTP <strong>request</strong> to a server, and the server sends a <strong>response</strong> back to you.</p>

<p>When you navigate through a website, the links you’re clinking are all requests. And when you get to a different page with a different URL at the top, that’s a <strong>state transition</strong>; you have directed the next state of the application. HTTP is “<strong>stateless</strong>,” meaning that it has no memory across requests.</p>

<p>So what the hell is an API, anyway? Isn’t that just like, a buzzword?</p>

<p>Well, yes. Because APIs are really important and get a lot of attention these days. API stands for <strong>Application Programming Interface</strong>, and is really like a contract; it specifies the ways you can interact with an application. So if you wanted to interact with an app like Twitter, for example, you’d need to use their API, which would specify how you authenticate, use URLs, classes, and other methods, etc.</p>

<h3>Making a Request</h3>

<p>First, we <em>require</em> the ‘open-uri’ module, which allows us to bring in the additional methods and constants we need for our HTTP requests. ‘open-uri’ is a very cool module that allows us to do a lot with URLs; later we&rsquo;ll be using it to scrape the internet. But for now, suffice it to say that it&rsquo;s very useful.</p>

<p>Here is an example that I found on CodeAcademy that is quite useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">kittens</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;http://placekitten.com&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="n">kittens</span><span class="o">.</span><span class="n">read</span><span class="o">[</span><span class="mi">559</span><span class="p">,</span> <span class="mi">441</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">body</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; &quot;Meow Meow Meow&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More about HTTP</h3>

<p>Let&rsquo;s learn a little more about HTTP before we dive more into the thick of it. First, we&rsquo;ll learn about the four types of requests in HTTP. This is a tad misleading, because</p>

<p><strong>The Four Verbs For HTTP</strong></p>

<p>GET &ndash; retrieves info from the source</p>

<p>POST &ndash; sends new info to the source</p>

<p>PATCH &ndash; updates information at the source</p>

<p>DELETE &ndash; removes information from the source</p>

<p><strong>The Anatomy of a Request</strong></p>

<p>The <em>request line</em>: i.e. POST /willhasablog/yay HTTP/1.1</p>

<p>The <em>header</em> i.e. Content-Type: text/html; charset=UTF-8</p>

<p>The <em>body</em>: i.e. Name=You</p>

<p><strong>Authentication &amp; API Keys</strong></p>

<p>Most API’s require a key. The key accomplishes two things &ndash; not only does it grant you access, but it also identifies you TO the API &ndash; they like to know exactly how their service is used and prevent malicious activity.
Keys look like this:</p>

<p>api_key = “FtHwuH8w1RDjQpOr0y0gF3AWm8sRsRzncK3hHh9&#8221;</p>

<h3>Responses</h3>

<p>So we mentioned how every time you click on something on a site it’s actually a request to a remote server, right??
So when you make a successful request, like, when your question is heard, you will get a response. And the response will, among other things, contain a three-digit status code! Isn’t that awesome? Websites aren’t like people; they can&rsquo;t stonewall you. They respond! And the status code can start with a 1, 2, 3, 4, or 5.</p>

<p>100s &ndash; More uncommon, server is working on your request.</p>

<p>200s &ndash; These mean ok- usually getting a 200 is the equivalent of things are fine.</p>

<p>300s &ndash; These mean that the site can do what you want but you might have to be rerouted to accomplish it (like a change in URL requiring a redirect).</p>

<p>400s &ndash; These are common &ndash; means that you probably made a mistake.</p>

<p>500s &ndash; This means that the server goofed up and can’t successfully respond to the request.</p>

<p><strong>The Anatomy of a Response:</strong></p>

<p>Like a request, a response has three parts.</p>

<p>The <em>response line</em>:i.e. HTTP/1.1 200 OK</p>

<p>The <em>header</em>: i.e. Content-Type: text/xml; charset=UTF-8
The <em>body</em>: i.e. &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?></p>

<h1><string xmlns=“http://wlowry88.github.io">Accepted</string></h1>

<h3>XML and JSON</h3>

<p><strong>WTF is XML?</strong></p>

<p>XML is another markup language that is human and machine readable used to encode documents. Here&rsquo;s how you might parse it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">rexml</span><span class="o">/</span><span class="n">document</span><span class="err">’</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="err">“</span><span class="n">wlowrypost</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="no">REXML</span><span class="o">::</span><span class="no">Document</span><span class="o">.</span><span class="n">new</span> <span class="n">file</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span><span class="o">.</span><span class="n">elements</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="err">“</span><span class="n">pets</span><span class="o">/</span><span class="n">pet</span><span class="o">/</span><span class="nb">name</span><span class="err">”</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>     <span class="nb">puts</span> <span class="n">element</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>WTF is JSON?</strong></p>

<p>JSON stands for <strong>J</strong>ava<strong>Script </strong>O<strong>bject</strong>N**otation. It is based off of JavaScript objects, which look a lot like hashes to us Rubyists. It is more succinct than the equivalent XML, and it doesn’t require tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;Cartoon Foxes&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;Name&quot;</span><span class="p">:</span> <span class="s2">&quot;Fox Tall&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Job&quot;</span><span class="p">:</span> <span class="s2">&quot;Bein&#39; tall&quot;</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;Name&quot;</span><span class="p">:</span> <span class="s2">&quot;Fox Small&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;Job&quot;</span><span class="p">:</span> <span class="s2">&quot;Bein&#39; small&quot;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>So, XML or JSON?</strong>
The only way you’ll know what type of data you’ll get from an API is to read it’s documentation.</p>

<h3>Phew, that was a lot.</h3>

<p>Thanks so much, and next time we&rsquo;ll actually put what we learned today to use.</p>

<p>W</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Eternal Whitebelt?]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/04/White%20Belt/"/>
    <updated>2014-07-04T18:28:24-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/04/White Belt</id>
    <content type="html"><![CDATA[<h3>Inspiration</h3>

<p>It&rsquo;s a rainy Fourth of July here in Needham, MA, the town in which I was &ldquo;initialized&rdquo;. It&rsquo;s a huge change of pace from NYC. It&rsquo;s pretty cool to be back and see my family. But it also got me thinking. I have been coding now every day for 5 weeks (I accidentally broke my streak on github because I didn&rsquo;t know committing to opened pull requests didn&rsquo;t count, argh >_&lt;), and I have begun to realize that I really enjoy this stuff. And I like it enough to do it professionally. But that also means that I have a really long way to go.</p>

<!-- more -->


<h3>So, why the eternal white belt then? Don&rsquo;t you want to advance and improve?</h3>

<p>Without getting overly philosophical, I think it&rsquo;s really all about leaving your ego at the door and being ready to learn like a beginner. The white belt is a powerful tool &ndash; it allows you to know that you&rsquo;re not stupid, not completely incompetent, but acknowledge you may know nothing about a particular discipline. Yet. And that&rsquo;s completely ok. It helps keep things fresh; I think the best default state is to be learning.</p>

<blockquote><p>When [he] was quite old and close to death, the story goes, he called his students around him and told them we wanted to be buried in his white belt. What a touching story; how humble of the world’s highest-ranking judoist in his last days to ask for the emblem of a beginner! But Kano’s request, I eventually realized, was less humility than realism. At the moment of death, the ultimate transformation, we are all white belts. And if death makes beginners of us, so does life — again and again. In the master’s secret mirror, even at the moment of highest renown and accomplishment, there is an image of the newest student in the class, eager for knowledge, willing to play the fool.</p></blockquote>

<p>I think this is a very important thing to keep in mind coming from a non-technical background and leaping into the Flatiron School program. A few of my fellow students have a little more experience than I do with computer science concepts; for instance, I had never seen recursion in a solution before our &ldquo;Binary Trees in Ruby&rdquo; lab the other day. It was hard for me, but once I saw it, it was beautiful.</p>

<p>Regardless of whether or not I become a black-belt in Ruby, or whether or not I&rsquo;ll be able to understand procs and lambdas and metaprogramming or build a rails app from scratch without assistance, I think that maintaining a proper beginner mindset will be crucial.</p>

<p>Have a happy Fourth!</p>

<p>W</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An ActiveRecord Model of Jazz??]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/04/jazz-model/"/>
    <updated>2014-07-04T17:13:09-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/04/jazz-model</id>
    <content type="html"><![CDATA[<p>So we&rsquo;ve been learning about ActiveRecord here at Flatiron School, and how it&rsquo;s a really awesome ORM that makes things much easier for us in developing applications. I&rsquo;ve also known for a while that there is a connection between music theory and programming, especially with Python, and I wondered if there were a way to combine it with Ruby.</p>

<!-- more -->


<p>Jazz Model is an ActiveRecord model of concepts in Jazz theory, establishing relationships between chords and scales, and much more.</p>

<p>The core of Jazz Toolbox is a full Ruby object model representing concepts of Jazz theory
All chord/scale/mode/etc. definitions are stored as a mathematical system (sequences of numbers) which are then used to perform calculations.</p>

<p>For example, putting some chord in a different key is a matter of adding an arbitrary delta of half-steps and doing modulo 12.</p>

<h3>The Jazz Model Module</h3>

<p>Their classes often inherit from their base Jazz Module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">JazzModel</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">establish_connection</span> <span class="ss">:adapter</span> <span class="o">=&gt;</span> <span class="s2">&quot;sqlite3&quot;</span><span class="p">,</span> <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s2">&quot;:memory:&quot;</span>
</span><span class='line'>    <span class="nb">load</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;../../db/schema.rb&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load_definitions</span><span class="p">(</span><span class="n">definition_name</span> <span class="o">=</span> <span class="ss">:default</span><span class="p">)</span>
</span><span class='line'>      <span class="n">definition</span> <span class="o">=</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Definition</span><span class="o">[</span><span class="n">definition_name</span><span class="o">]</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;Definition </span><span class="si">#{</span><span class="n">definition_name</span><span class="si">}</span><span class="s2"> not found.&quot;</span> <span class="k">unless</span> <span class="n">definition</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">definition</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that the module inherits from ActiveRecord, and that it uses a sqlite3 adapter by default. However, we learned that ActiveRecord is relational database agnostic. Definitions are things like, chords, scales, etc. And here&rsquo;s an example of a class &ndash; the Chord class!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Chord</span> <span class="o">&lt;</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">KeyContext</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">acts_as_tree</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:chord_quality</span> <span class="c1">#zOMG we learned this yesterday</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:symbols</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordSymbol&#39;</span><span class="p">,</span> <span class="ss">:extend</span> <span class="o">=&gt;</span> <span class="no">ChordSymbolCollection</span>
</span><span class='line'>    <span class="n">has_one</span> <span class="ss">:primary_symbol</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordSymbol&#39;</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:chord_scales</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:modes</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:chord_scales</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:tones</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordTone&#39;</span><span class="p">,</span> <span class="ss">:extend</span> <span class="o">=&gt;</span> <span class="no">ToneSequence</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:voicings</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#a lot more stuff</span>
</span><span class='line'>  <span class="k">end</span> <span class="c1">#after that stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have associations happenin&#8217;, yo. In our study of ActiveRecord so far, we&rsquo;ve learned that objects can be related to one another; namely, a chord has many tones (makes sense), a chord has many voicings (these are inversions, a version of the chord that uses the same notes but in a different arrangement and note in the bass of the chord. But we can also see that it belongs_to chord quality &ndash; namely, there&rsquo;s a class called ChordQuality, and we can see a bit of it here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">ChordQuality</span> <span class="o">&lt;</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:chords</span> <span class="c1">#&lt;- #Chords, I like you too.</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">resolve</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">alias_method</span> <span class="ss">:[]</span><span class="p">,</span> <span class="ss">:resolve</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The relationship is reciprocated! And here&rsquo;s a quick look at what&rsquo;s going on in the database &ndash; this is a very truncated view and only represents the creation of the chords table!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:chord_qualities</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:chords</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">belongs_to</span> <span class="ss">:chord_quality</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:parent_id</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:synonyms</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:information</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also see a nice implementation of the tap method in our table creation. Below, we can see some of the usages of the method notes(), which returns an array of the notes of a chord. For music theory buffs, notice that it returns the correctly-spelled notes, not just the enharmonically easier ones!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Enumerate notes of a Chord:</span>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;maj&#39;</span><span class="o">].</span><span class="n">notes</span>   <span class="c1"># Defaults to C without specified key context#</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;C&#39;, &#39;E&#39;, &#39;G&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;Ebmaj7&#39;</span><span class="o">].</span><span class="n">notes</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;Eb&#39;, &#39;G&#39;, &#39;Bb&#39;, &#39;D&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Or specify key context with chained methods like this...</span>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;Bmaj7#11&#39;</span><span class="o">].</span><span class="n">notes</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;B&#39;, &#39;D#&#39;, &#39;F#&#39;, &#39;A#&#39;, &#39;E#&#39;]# Note E# - Correct theoretic value for this chord, not F</span>
</span></code></pre></td></tr></table></div></figure>


<p>Who knew there would be a &ldquo;notes&rdquo; method for chords in Ruby? I sure didn&rsquo;t. And you can solve problems like these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Ruby Example Problem:</span>
</span><span class='line'><span class="c1">#Find all chords associated with the Major scale and</span>
</span><span class='line'><span class="c1">#print each on a new line with the chord tones.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Scale</span><span class="o">[</span><span class="s1">&#39;Major&#39;</span><span class="o">].</span><span class="n">chords</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">notes</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)}</span> <span class="o">*</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># =&gt; Major 7: C, E, G, B    </span>
</span><span class='line'><span class="c1">#Major 6: C, E, G, A</span>
</span><span class='line'><span class="c1">#Dominant 6/9: C, E, G, Bb, D, A</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, I think this could be a fun open-source project to contribute to.</p>

<p>Cheers,</p>

<p>W</p>
]]></content>
  </entry>
  
</feed>
