<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eternal White Belt]]></title>
  <link href="http://wlowry88.github.io/atom.xml" rel="self"/>
  <link href="http://wlowry88.github.io/"/>
  <updated>2014-07-05T19:37:31-04:00</updated>
  <id>http://wlowry88.github.io/</id>
  <author>
    <name><![CDATA[Will Lowry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using APIs with Ruby]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/05/using-apis-with-ruby/"/>
    <updated>2014-07-05T19:21:23-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/05/using-apis-with-ruby</id>
    <content type="html"><![CDATA[<p>So everyone loves philosophical musings about beginning and learning, but I thought today’s post should be a little more technical. The topic &ndash; using API’s and getting data from other websites! This will be a two-part series &ndash; the first part will center around using API’s with Ruby and the second will be a surprise.</p>

<!--More-->


<h2>Part 1: Background on APIs with Ruby!</h2>

<h3>HTTP</h3>

<p>Everyone who’s used a computer with internet recently has already used HTTP. That’s how browsing the internet works. You internet browser sends an HTTP <strong>request</strong> to a server, and the server sends a <strong>response</strong> back to you.</p>

<p>When you navigate through a website, the links you’re clinking are all requests. And when you get to a different page with a different URL at the top, that’s a <strong>state transition</strong>; you have directed the next state of the application. HTTP is “<strong>stateless</strong>,” meaning that it has no memory across requests.</p>

<p>So what the hell is an API, anyway? Isn’t that just like, a buzzword?</p>

<p>Well, yes. Because APIs are really important and get a lot of attention these days. API stands for <strong>Application Programming Interface</strong>, and is really like a contract; it specifies the ways you can interact with an application. So if you wanted to interact with an app like Twitter, for example, you’d need to use their API, which would specify how you authenticate, use URLs, classes, and other methods, etc.</p>

<h3>Making a Request</h3>

<p>First, we <em>require</em> the ‘open-uri’ module, which allows us to bring in the additional methods and constants we need for our HTTP requests. ‘open-uri’ is a very cool module that allows us to do a lot with URLs; later we&rsquo;ll be using it to scrape the internet. But for now, suffice it to say that it&rsquo;s very useful.</p>

<p>Here is an example that I found on CodeAcademy that is quite useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">kittens</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;http://placekitten.com&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="n">kittens</span><span class="o">.</span><span class="n">read</span><span class="o">[</span><span class="mi">559</span><span class="p">,</span> <span class="mi">441</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">body</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; &quot;Meow Meow Meow&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More about HTTP</h3>

<p>Let&rsquo;s learn a little more about HTTP before we dive more into the thick of it. First, we&rsquo;ll learn about the four types of requests in HTTP. This is a tad misleading, because</p>

<p><strong>The Four Verbs For HTTP</strong></p>

<p>GET &ndash; retrieves info from the source</p>

<p>POST &ndash; sends new info to the source</p>

<p>PATCH &ndash; updates information at the source</p>

<p>DELETE &ndash; removes information from the source</p>

<p><strong>The Anatomy of a Request</strong></p>

<p>The <em>request line</em>: i.e. POST /willhasablog/yay HTTP/1.1</p>

<p>The <em>header</em> i.e. Content-Type: text/html; charset=UTF-8</p>

<p>The <em>body</em>: i.e. Name=You</p>

<p><strong>Authentication &amp; API Keys</strong></p>

<p>Most API’s require a key. The key accomplishes two things &ndash; not only does it grant you access, but it also identifies you TO the API &ndash; they like to know exactly how their service is used and prevent malicious activity.
Keys look like this:</p>

<p>api_key = “FtHwuH8w1RDjQpOr0y0gF3AWm8sRsRzncK3hHh9&#8221;</p>

<h3>Responses</h3>

<p>So we mentioned how every time you click on something on a site it’s actually a request to a remote server, right??
So when you make a successful request, like, when your question is heard, you will get a response. And the response will, among other things, contain a three-digit status code! Isn’t that awesome? Websites aren’t like people; they can&rsquo;t stonewall you. They respond! And the status code can start with a 1, 2, 3, 4, or 5.</p>

<p>100s &ndash; More uncommon, server is working on your request.</p>

<p>200s &ndash; These mean ok- usually getting a 200 is the equivalent of things are fine.</p>

<p>300s &ndash; These mean that the site can do what you want but you might have to be rerouted to accomplish it (like a change in URL requiring a redirect).</p>

<p>400s &ndash; These are common &ndash; means that you probably made a mistake.</p>

<p>500s &ndash; This means that the server goofed up and can’t successfully respond to the request.</p>

<p><strong>The Anatomy of a Response:</strong></p>

<p>Like a request, a response has three parts.</p>

<p>The <em>response line</em>:i.e. HTTP/1.1 200 OK</p>

<p>The <em>header</em>: i.e. Content-Type: text/xml; charset=UTF-8
The <em>body</em>: i.e. &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?></p>

<h1><string xmlns=“http://wlowry88.github.io">Accepted</string></h1>

<h3>XML and JSON</h3>

<p><strong>WTF is XML?</strong></p>

<p>XML is another markup language that is human and machine readable used to encode documents. Here&rsquo;s how you might parse it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">rexml</span><span class="o">/</span><span class="n">document</span><span class="err">’</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="err">“</span><span class="n">wlowrypost</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="no">REXML</span><span class="o">::</span><span class="no">Document</span><span class="o">.</span><span class="n">new</span> <span class="n">file</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span><span class="o">.</span><span class="n">elements</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="err">“</span><span class="n">pets</span><span class="o">/</span><span class="n">pet</span><span class="o">/</span><span class="nb">name</span><span class="err">”</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>     <span class="nb">puts</span> <span class="n">element</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>WTF is JSON?</strong></p>

<p>JSON stands for <strong>J</strong>ava<strong>Script </strong>O<strong>bject</strong>N**otation. It is based off of JavaScript objects, which look a lot like hashes to us Rubyists. It is more succinct than the equivalent XML, and it doesn’t require tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;Cartoon Foxes&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;Name&quot;</span><span class="p">:</span> <span class="s2">&quot;Fox Tall&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Job&quot;</span><span class="p">:</span> <span class="s2">&quot;Bein&#39; tall&quot;</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>       <span class="s2">&quot;Name&quot;</span><span class="p">:</span> <span class="s2">&quot;Fox Small&quot;</span><span class="p">,</span>
</span><span class='line'>       <span class="s2">&quot;Job&quot;</span><span class="p">:</span> <span class="s2">&quot;Bein&#39; small&quot;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>So, XML or JSON?</strong>
The only way you’ll know what type of data you’ll get from an API is to read it’s documentation.</p>

<h3>Phew, that was a lot.</h3>

<p>Thanks so much, and next time we&rsquo;ll actually put what we learned today to use.</p>

<p>W</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Eternal Whitebelt?]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/04/White%20Belt/"/>
    <updated>2014-07-04T18:28:24-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/04/White Belt</id>
    <content type="html"><![CDATA[<h3>Inspiration</h3>

<p>It&rsquo;s a rainy Fourth of July here in Needham, MA, the town in which I was &ldquo;initialized&rdquo;. It&rsquo;s a huge change of pace from NYC. It&rsquo;s pretty cool to be back and see my family. But it also got me thinking. I have been coding now every day for 5 weeks (I accidentally broke my streak on github because I didn&rsquo;t know committing to opened pull requests didn&rsquo;t count, argh >_&lt;), and I have begun to realize that I really enjoy this stuff. And I like it enough to do it professionally. But that also means that I have a really long way to go.</p>

<!-- more -->


<h3>So, why the eternal white belt then? Don&rsquo;t you want to advance and improve?</h3>

<p>Without getting overly philosophical, I think it&rsquo;s really all about leaving your ego at the door and being ready to learn like a beginner. The white belt is a powerful tool &ndash; it allows you to know that you&rsquo;re not stupid, not completely incompetent, but acknowledge you may know nothing about a particular discipline. Yet. And that&rsquo;s completely ok. It helps keep things fresh; I think the best default state is to be learning.</p>

<blockquote><p>When [he] was quite old and close to death, the story goes, he called his students around him and told them we wanted to be buried in his white belt. What a touching story; how humble of the world’s highest-ranking judoist in his last days to ask for the emblem of a beginner! But Kano’s request, I eventually realized, was less humility than realism. At the moment of death, the ultimate transformation, we are all white belts. And if death makes beginners of us, so does life — again and again. In the master’s secret mirror, even at the moment of highest renown and accomplishment, there is an image of the newest student in the class, eager for knowledge, willing to play the fool.</p></blockquote>

<p>I think this is a very important thing to keep in mind coming from a non-technical background and leaping into the Flatiron School program. A few of my fellow students have a little more experience than I do with computer science concepts; for instance, I had never seen recursion in a solution before our &ldquo;Binary Trees in Ruby&rdquo; lab the other day. It was hard for me, but once I saw it, it was beautiful.</p>

<p>Regardless of whether or not I become a black-belt in Ruby, or whether or not I&rsquo;ll be able to understand procs and lambdas and metaprogramming or build a rails app from scratch without assistance, I think that maintaining a proper beginner mindset will be crucial.</p>

<p>Have a happy Fourth!</p>

<p>W</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jazz Model]]></title>
    <link href="http://wlowry88.github.io/blog/2014/07/04/jazz-model/"/>
    <updated>2014-07-04T17:13:09-04:00</updated>
    <id>http://wlowry88.github.io/blog/2014/07/04/jazz-model</id>
    <content type="html"><![CDATA[<p>So we&rsquo;ve been learning about ActiveRecord here at Flatiron School, and how it&rsquo;s a really awesome ORM that makes things much easier for us in developing applications. I&rsquo;ve also known for a while that there is a connection between music theory and programming, especially with Python, and I wondered if there were a way to combine it with Ruby.</p>

<!-- more -->


<p>Jazz Model is an ActiveRecord model of concepts in Jazz theory, establishing relationships between chords and scales, and much more.</p>

<p>The core of Jazz Toolbox is a full Ruby object model representing concepts of Jazz theory
All chord/scale/mode/etc. definitions are stored as a mathematical system (sequences of numbers) which are then used to perform calculations.</p>

<p>For example, putting some chord in a different key is a matter of adding an arbitrary delta of half-steps and doing modulo 12.</p>

<h3>The Jazz Model Module</h3>

<p>Their classes often inherit from their base Jazz Module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">JazzModel</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">establish_connection</span> <span class="ss">:adapter</span> <span class="o">=&gt;</span> <span class="s2">&quot;sqlite3&quot;</span><span class="p">,</span> <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s2">&quot;:memory:&quot;</span>
</span><span class='line'>    <span class="nb">load</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;../../db/schema.rb&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load_definitions</span><span class="p">(</span><span class="n">definition_name</span> <span class="o">=</span> <span class="ss">:default</span><span class="p">)</span>
</span><span class='line'>      <span class="n">definition</span> <span class="o">=</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Definition</span><span class="o">[</span><span class="n">definition_name</span><span class="o">]</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;Definition </span><span class="si">#{</span><span class="n">definition_name</span><span class="si">}</span><span class="s2"> not found.&quot;</span> <span class="k">unless</span> <span class="n">definition</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">definition</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that the module inherits from ActiveRecord, and that it uses a sqlite3 adapter by default. However, we learned that ActiveRecord is relational database agnostic. Definitions are things like, chords, scales, etc. And here&rsquo;s an example of a class &ndash; the Chord class!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Chord</span> <span class="o">&lt;</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">KeyContext</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">acts_as_tree</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:chord_quality</span> <span class="c1">#zOMG we learned this yesterday</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:symbols</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordSymbol&#39;</span><span class="p">,</span> <span class="ss">:extend</span> <span class="o">=&gt;</span> <span class="no">ChordSymbolCollection</span>
</span><span class='line'>    <span class="n">has_one</span> <span class="ss">:primary_symbol</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordSymbol&#39;</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:chord_scales</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:modes</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:chord_scales</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:tones</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;ChordTone&#39;</span><span class="p">,</span> <span class="ss">:extend</span> <span class="o">=&gt;</span> <span class="no">ToneSequence</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:voicings</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#a lot more stuff</span>
</span><span class='line'>  <span class="k">end</span> <span class="c1">#after that stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have associations happenin&#8217;, yo. In our study of ActiveRecord so far, we&rsquo;ve learned that objects can be related to one another; namely, a chord has many tones (makes sense), a chord has many voicings (these are inversions, a version of the chord that uses the same notes but in a different arrangement and note in the bass of the chord. But we can also see that it belongs_to chord quality &ndash; namely, there&rsquo;s a class called ChordQuality, and we can see a bit of it here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">ChordQuality</span> <span class="o">&lt;</span> <span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:chords</span> <span class="c1">#&lt;- #Chords, I like you too.</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">resolve</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">alias_method</span> <span class="ss">:[]</span><span class="p">,</span> <span class="ss">:resolve</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The relationship is reciprocated! And here&rsquo;s a quick look at what&rsquo;s going on in the database &ndash; this is a very truncated view and only represents the creation of the chords table!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">JazzModel</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:chord_qualities</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:chords</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">belongs_to</span> <span class="ss">:chord_quality</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:parent_id</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:synonyms</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:information</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also see a nice implementation of the tap method in our table creation. Below, we can see some of the usages of the method notes(), which returns an array of the notes of a chord. For music theory buffs, notice that it returns the correctly-spelled notes, not just the enharmonically easier ones!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Enumerate notes of a Chord:</span>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;maj&#39;</span><span class="o">].</span><span class="n">notes</span>   <span class="c1"># Defaults to C without specified key context#</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;C&#39;, &#39;E&#39;, &#39;G&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;Ebmaj7&#39;</span><span class="o">].</span><span class="n">notes</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;Eb&#39;, &#39;G&#39;, &#39;Bb&#39;, &#39;D&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Or specify key context with chained methods like this...</span>
</span><span class='line'><span class="no">Chord</span><span class="o">[</span><span class="s1">&#39;Bmaj7#11&#39;</span><span class="o">].</span><span class="n">notes</span>
</span><span class='line'><span class="c1">#=&gt; [&#39;B&#39;, &#39;D#&#39;, &#39;F#&#39;, &#39;A#&#39;, &#39;E#&#39;]# Note E# - Correct theoretic value for this chord, not F</span>
</span></code></pre></td></tr></table></div></figure>


<p>Who knew there would be a &ldquo;notes&rdquo; method for chords in Ruby? I sure didn&rsquo;t. And you can solve problems like these:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Ruby Example Problem:</span>
</span><span class='line'><span class="c1">#Find all chords associated with the Major scale and</span>
</span><span class='line'><span class="c1">#print each on a new line with the chord tones.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Scale</span><span class="o">[</span><span class="s1">&#39;Major&#39;</span><span class="o">].</span><span class="n">chords</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">name</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">notes</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)}</span> <span class="o">*</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># =&gt; Major 7: C, E, G, B    </span>
</span><span class='line'><span class="c1">#Major 6: C, E, G, A</span>
</span><span class='line'><span class="c1">#Dominant 6/9: C, E, G, Bb, D, A</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, I think this could be a fun open-source project to contribute to.</p>

<p>Cheers,</p>

<p>W</p>
]]></content>
  </entry>
  
</feed>
